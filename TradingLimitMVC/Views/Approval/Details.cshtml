@model TradingLimitMVC.Controllers.ApprovalDetailsViewModel

@{
    ViewData["Title"] = $"Approve Request - {Model.Request.RequestId}";
}

@functions {
    string FormatTimeSpan(TimeSpan timeSpan)
    {
        var totalHours = (int)timeSpan.TotalHours;
        var days = totalHours / 24;
        var hours = totalHours % 24;
        var minutes = timeSpan.Minutes;

        if (days > 0)
        {
            if (hours > 0)
                return $"{days}d {hours}h";
            else
                return $"{days}d";
        }
        else if (hours > 0)
        {
            if (minutes > 0)
                return $"{hours}h {minutes}m";
            else
                return $"{hours}h";
        }
        else
        {
            return $"{minutes}m";
        }
    }
}

<div class="container-fluid">
    <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
            <!-- Breadcrumb and Header -->
            <nav aria-label="breadcrumb" class="mb-3">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="@Url.Action("Index")" class="text-decoration-none">
                            <i class="fas fa-check-circle me-1"></i>Approvals
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Request.RequestId</li>
                </ol>
            </nav>

            <div class="d-flex justify-content-between align-items-start mb-4">
                <div>
                    <h1 class="page-title mb-2">
                        Request Review & Approval
                    </h1>
                    <div class="d-flex align-items-center gap-3">
                        <span class="badge bg-@(Model.Request.Status == "Submitted" ? "primary" : "warning") bg-opacity-10 text-@(Model.Request.Status == "Submitted" ? "primary" : "warning") px-3 py-2">
                            @Model.Request.Status
                        </span>
                        <span class="text-muted">
                            <i class="fas fa-clock me-1"></i>
                            Submitted @Model.Request.SubmittedDate?.ToString("MMM dd, yyyy 'at' hh:mm tt")
                        </span>
                    </div>
                </div>
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i>
                    Back to List
                </a>
            </div>

            <!-- Request Details Card -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-bottom py-3">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-file-contract me-2 text-primary"></i>
                        Request Details
                    </h5>
                </div>
                <div class="card-body p-4">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label text-muted">Request ID</label>
                            <div class="fw-bold">@Model.Request.RequestId</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label text-muted">Request Type</label>
                            <div class="fw-bold">@Model.Request.RequestType</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label text-muted">Client Code</label>
                            <div class="fw-bold">@Model.Request.ClientCode</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label text-muted">TR Code</label>
                            <div class="fw-bold">@Model.Request.TRCode</div>
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label text-muted">Brief Description</label>
                            <div class="p-3 bg-light rounded">
                                @(string.IsNullOrEmpty(Model.Request.BriefDescription) ? "No description provided" : Model.Request.BriefDescription)
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Proposed Limits Card -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-bottom py-3">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-dollar-sign me-2 text-success"></i>
                        Proposed Limits
                    </h5>
                </div>
                <div class="card-body p-4">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-4">
                                <label class="form-label text-muted">Current GL Limit</label>
                                <div class="display-6 text-primary fw-bold">
                                    @Model.Request.CurrentProposedLimit.ToString("C")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-4">
                                <label class="form-label text-muted">Proposed GL Limit</label>
                                <div class="display-6 text-success fw-bold">
                                    @Model.Request.GLProposedLimit.ToString("C")
                                </div>
                                @{
                                    var difference = Model.Request.GLProposedLimit - Model.Request.CurrentProposedLimit;
                                    var percentageChange = Model.Request.CurrentProposedLimit > 0 ? (difference / Model.Request.CurrentProposedLimit) * 100 : 0;
                                }
                                @if (difference != 0)
                                {
                                    <div class="mt-2">
                                        <span class="badge bg-@(difference > 0 ? "success" : "danger") bg-opacity-10 text-@(difference > 0 ? "success" : "danger")">
                                            @(difference > 0 ? "+" : "")@difference.ToString("C") 
                                            (@(difference > 0 ? "+" : "")@percentageChange.ToString("F1")%)
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Attachments Card -->
            @if (Model.Request.HasSupportingDocuments && Model.Request.Attachments?.Any() == true)
            {
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white border-bottom py-3">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-paperclip me-2 text-info"></i>
                            Supporting Documents
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        <div class="list-group list-group-flush">
                            @foreach (var attachment in Model.Request.Attachments)
                            {
                                <div class="list-group-item border-0 px-0 py-2">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-file text-primary me-3"></i>
                                            <div>
                                                <div class="fw-medium">@attachment.FileName</div>
                                                <small class="text-muted">@attachment.FileSize bytes â€¢ Uploaded @attachment.UploadDate.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        </div>
                                        <a href="@Url.Action("DownloadAttachment", "TradingLimitRequest", new { id = attachment.Id })" 
                                           class="btn btn-outline-primary btn-sm">
                                            <i class="fas fa-download me-1"></i>
                                            Download
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Approval Actions Sidebar -->
        <div class="col-lg-4">
            <div class="sticky-top" style="top: 20px;">
                <!-- Quick Actions Card -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-primary text-white py-3">
                        <h5 class="card-title mb-0 text-white">
                            <i class="fas fa-tasks me-2"></i>
                            Approval Actions
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        @if (Model.CanApprove)
                        {
                            <form id="approvalForm">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="RequestId" value="@Model.Request.Id" />
                                
                                <div class="mb-4">
                                    <label for="comments" class="form-label">Comments</label>
                                    <textarea class="form-control" id="comments" name="Comments" rows="4" 
                                              placeholder="Add your approval comments, conditions, or notes..."></textarea>
                                    <div class="form-text">Comments will be visible to the requester and other approvers.</div>
                                </div>

                                <div class="d-grid gap-2">
                                    <button type="button" class="btn btn-success btn-lg" onclick="approveRequest()">
                                        <i class="fas fa-check me-2"></i>
                                        Approve Request
                                    </button>
                                    <button type="button" class="btn btn-warning btn-lg" onclick="requestRevision()">
                                        <i class="fas fa-edit me-2"></i>
                                        Request Revision
                                    </button>
                                    <button type="button" class="btn btn-danger btn-lg" onclick="rejectRequest()">
                                        <i class="fas fa-times me-2"></i>
                                        Reject Request
                                    </button>
                                </div>
                            </form>
                        }
                        else
                        {
                            <div class="text-center">
                                <div class="alert alert-info border-0 bg-info bg-opacity-10">
                                    <i class="fas fa-info-circle me-2"></i>
                                    You do not have permission to approve this request.
                                </div>
                                <p class="text-muted mb-0">
                                    This request is assigned to: <strong>@Model.Request.ApprovalEmail</strong>
                                </p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Request Timeline Card -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-white border-bottom py-3">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-route me-2 text-secondary"></i>
                            Approval Timeline & Workflow Steps
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        <div class="timeline">
                            <!-- Request Submitted -->
                            <div class="timeline-item">
                                <div class="timeline-marker bg-primary"></div>
                                <div class="timeline-content">
                                    <h6 class="timeline-title">Request Submitted</h6>
                                    <p class="timeline-text text-muted mb-1">
                                        By @Model.Request.SubmittedBy
                                    </p>
                                    <small class="text-muted">
                                        @Model.Request.SubmittedDate?.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                    </small>
                                </div>
                            </div>

                            @if (Model.Request.ApprovalWorkflow != null && Model.Request.ApprovalWorkflow.ApprovalSteps.Any())
                            {
                                <!-- Multi-step Approval Workflow -->
                                @foreach (var step in Model.Request.ApprovalWorkflow.ApprovalSteps.OrderBy(s => s.StepNumber))
                                {
                                var stepStatus = step.Status;
                                var markerClass = stepStatus switch {
                                    "Approved" => "bg-success",
                                    "Rejected" => "bg-danger",
                                    "Revision Required" => "bg-warning",
                                    "InProgress" => "bg-primary",
                                    "Pending" => "bg-secondary",
                                    _ => "bg-light"
                                };
                                var statusIcon = stepStatus switch {
                                    "Approved" => "fa-check",
                                    "Rejected" => "fa-times",
                                    "Revision Required" => "fa-edit",
                                    "InProgress" => "fa-spinner",
                                    "Pending" => "fa-clock",
                                    _ => "fa-question"
                                };                                    <div class="timeline-item @(stepStatus == "InProgress" ? "timeline-pending" : "")">
                                        <div class="timeline-marker @markerClass">
                                            <i class="fas @statusIcon @(stepStatus == "InProgress" ? "fa-spin" : "") text-white" style="font-size: 0.7rem;"></i>
                                        </div>
                                        <div class="timeline-content">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <h6 class="timeline-title">
                                                        Step @step.StepNumber: @step.ApproverName
                                                        @if (!string.IsNullOrEmpty(step.ApproverRole))
                                                        {
                                                            <small class="text-muted">(@step.ApproverRole)</small>
                                                        }
                                                    </h6>
                                                    <p class="timeline-text text-muted mb-1">
                                                        @step.ApproverEmail
                                                    </p>
                                                </div>
                                            <span class="badge bg-@(stepStatus == "Approved" ? "success" : stepStatus == "Rejected" ? "danger" : stepStatus == "Revision Required" ? "warning" : stepStatus == "InProgress" ? "primary" : "secondary") bg-opacity-10 text-@(stepStatus == "Approved" ? "success" : stepStatus == "Rejected" ? "danger" : stepStatus == "Revision Required" ? "warning" : stepStatus == "InProgress" ? "primary" : "secondary") ms-2">
                                                @stepStatus
                                            </span>
                                            </div>
                                            @if (!string.IsNullOrEmpty(step.Comments))
                                            {
                                                <div class="mt-2 p-2 bg-light rounded">
                                                    <small class="text-muted">
                                                        <i class="fas fa-comment me-1"></i>
                                                        @step.Comments
                                                    </small>
                                                </div>
                                            }
                                            <!-- Time Information -->
                                            <div class="timeline-dates mt-2">
                                                @if (step.ActionDate.HasValue)
                                                {
                                                    <div class="d-flex align-items-center mb-1">
                                                        <i class="fas fa-check-circle me-2 text-success" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Completed:</strong> @step.ActionDate?.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                        </small>
                                                    </div>
                                                    @if (step.AssignedDate != default && step.ActionDate.HasValue)
                                                    {
                                                        var processingTime = step.ActionDate.Value - step.AssignedDate;
                                                        <div class="d-flex align-items-center mb-1">
                                                            <i class="fas fa-stopwatch me-2 text-primary" style="font-size: 0.8rem;"></i>
                                                            <small class="text-muted">
                                                                <strong>Processing Time:</strong> @FormatTimeSpan(processingTime)
                                                            </small>
                                                        </div>
                                                    }
                                                }
                                                else if (stepStatus == "InProgress")
                                                {
                                                    <div class="d-flex align-items-center mb-1">
                                                        <i class="fas fa-spinner fa-spin me-2 text-primary" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Status:</strong> In progress - actively reviewing
                                                        </small>
                                                    </div>
                                                }
                                                else if (stepStatus == "Pending")
                                                {
                                                    <div class="d-flex align-items-center mb-1">
                                                        <i class="fas fa-clock me-2 text-secondary" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Status:</strong> Waiting in queue
                                                        </small>
                                                    </div>
                                                    @if (step.DueDate.HasValue)
                                                    {
                                                        var timeUntilDue = step.DueDate - DateTime.UtcNow;
                                                        var isOverdue = timeUntilDue < TimeSpan.Zero;
                                                        <div class="d-flex align-items-center mb-1">
                                                            <i class="fas fa-calendar-alt me-2 @(isOverdue ? "text-danger" : "text-info")" style="font-size: 0.8rem;"></i>
                                                            <small class="text-muted">
                                                                <strong>Due:</strong> @step.DueDate?.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                                @if (isOverdue)
                                                                {
                                                                    <span class="badge bg-danger bg-opacity-10 text-danger ms-1" style="font-size: 0.7rem;">Overdue</span>
                                                                }
                                                            </small>
                                                        </div>
                                                    }
                                                    @if (step.AssignedDate != default)
                                                    {
                                                        var waitingTime = DateTime.UtcNow - step.AssignedDate;
                                                        <div class="d-flex align-items-center mb-1">
                                                            <i class="fas fa-hourglass-half me-2 text-secondary" style="font-size: 0.8rem;"></i>
                                                            <small class="text-muted">
                                                                <strong>Waiting for:</strong> @FormatTimeSpan(waitingTime)
                                                            </small>
                                                        </div>
                                                    }
                                                }
                                                
                                                @if (step.AssignedDate != default)
                                                {
                                                    <div class="d-flex align-items-center">
                                                        <i class="fas fa-paper-plane me-2 text-info" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Assigned:</strong> @step.AssignedDate.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (!string.IsNullOrEmpty(Model.Request.ApprovalEmail))
                            {
                                <!-- Single Approver System -->
                                var singleApprovalStatus = Model.Request.Status;
                                var singleMarkerClass = singleApprovalStatus switch {
                                    "Approved" => "bg-success",
                                    "Rejected" => "bg-danger",
                                    "Revision Required" => "bg-warning",
                                    "Submitted" => "bg-secondary",
                                    _ => "bg-light"
                                };
                                var singleStatusIcon = singleApprovalStatus switch {
                                    "Approved" => "fa-check",
                                    "Rejected" => "fa-times",
                                    "Revision Required" => "fa-edit",
                                    "Submitted" => "fa-clock",
                                    _ => "fa-question"
                                };

                                <div class="timeline-item @(singleApprovalStatus == "Submitted" ? "timeline-pending" : "")">
                                    <div class="timeline-marker @singleMarkerClass">
                                        <i class="fas @singleStatusIcon text-white" style="font-size: 0.7rem;"></i>
                                    </div>
                                    <div class="timeline-content">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <h6 class="timeline-title">Approval Required</h6>
                                                <p class="timeline-text text-muted mb-1">
                                                    Assigned to: @Model.Request.ApprovalEmail
                                                </p>
                                            </div>
                                            <span class="badge bg-@(singleApprovalStatus == "Approved" ? "success" : singleApprovalStatus == "Rejected" ? "danger" : singleApprovalStatus == "Revision Required" ? "warning" : "secondary") bg-opacity-10 text-@(singleApprovalStatus == "Approved" ? "success" : singleApprovalStatus == "Rejected" ? "danger" : singleApprovalStatus == "Revision Required" ? "warning" : "secondary") ms-2">
                                                @(singleApprovalStatus == "Submitted" ? "Pending" : singleApprovalStatus)
                                            </span>
                                        </div>
                                        @if (singleApprovalStatus == "Submitted")
                                        {
                                            <div class="timeline-dates mt-2">
                                                <div class="d-flex align-items-center mb-1">
                                                    <i class="fas fa-clock me-2 text-warning" style="font-size: 0.8rem;"></i>
                                                    <small class="text-muted">
                                                        <strong>Status:</strong> Awaiting approval
                                                    </small>
                                                </div>
                                                @if (Model.Request.SubmittedDate.HasValue)
                                                {
                                                    var waitingTime = DateTime.UtcNow - Model.Request.SubmittedDate.Value;
                                                    <div class="d-flex align-items-center">
                                                        <i class="fas fa-hourglass-half me-2 text-secondary" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Waiting for:</strong> @FormatTimeSpan(waitingTime)
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- Approval History from Notifications -->
                            @if (Model.ApprovalHistory.Any())
                            {
                                @foreach (var notification in Model.ApprovalHistory)
                                {
                                    var notificationMarkerClass = notification.Type switch {
                                        TradingLimitMVC.Models.NotificationType.Approved => "bg-success",
                                        TradingLimitMVC.Models.NotificationType.FinalApproval => "bg-success",
                                        TradingLimitMVC.Models.NotificationType.Rejected => "bg-danger",
                                        TradingLimitMVC.Models.NotificationType.ReturnedForRevision => "bg-warning",
                                        TradingLimitMVC.Models.NotificationType.Escalated => "bg-info",
                                        _ => "bg-primary"
                                    };
                                    var notificationIcon = notification.Type switch {
                                        TradingLimitMVC.Models.NotificationType.Approved => "fa-check",
                                        TradingLimitMVC.Models.NotificationType.FinalApproval => "fa-check-double",
                                        TradingLimitMVC.Models.NotificationType.Rejected => "fa-times",
                                        TradingLimitMVC.Models.NotificationType.ReturnedForRevision => "fa-edit",
                                        TradingLimitMVC.Models.NotificationType.Escalated => "fa-arrow-up",
                                        _ => "fa-bell"
                                    };

                                    <div class="timeline-item timeline-notification">
                                        <div class="timeline-marker @notificationMarkerClass">
                                            <i class="fas @notificationIcon text-white" style="font-size: 0.7rem;"></i>
                                        </div>
                                        <div class="timeline-content">
                                            <h6 class="timeline-title">@notification.Type.ToString().Replace("ReturnedForRevision", "Returned for Revision")</h6>
                                            <p class="timeline-text text-muted mb-1">
                                                @notification.RecipientName (@notification.RecipientEmail)
                                            </p>
                                            @if (!string.IsNullOrEmpty(notification.Message))
                                            {
                                                <div class="mt-2 p-2 bg-light rounded">
                                                    <small class="text-muted">
                                                        <i class="fas fa-comment me-1"></i>
                                                        @notification.Message
                                                    </small>
                                                </div>
                                            }
                                            <div class="timeline-dates mt-2">
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-bell me-2 text-primary" style="font-size: 0.8rem;"></i>
                                                    <small class="text-muted">
                                                        <strong>Notification Sent:</strong> @notification.SentDate.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                    </small>
                                                </div>
                                                @if (notification.ReadDate.HasValue)
                                                {
                                                    <div class="d-flex align-items-center mt-1">
                                                        <i class="fas fa-eye me-2 text-success" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Read:</strong> @notification.ReadDate?.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                        </small>
                                                    </div>
                                                }
                                                else if (notification.Type == TradingLimitMVC.Models.NotificationType.ApprovalRequired)
                                                {
                                                    <div class="d-flex align-items-center mt-1">
                                                        <i class="fas fa-envelope me-2 text-warning" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Status:</strong> Unread
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>

                <!-- Risk Assessment Card -->
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-white border-bottom py-3">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-shield-alt me-2 text-warning"></i>
                            Risk Assessment
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        @{
                            var riskLevel = "Low";
                            var riskClass = "success";
                            var riskIcon = "fa-check-circle";
                            
                            if (Model.Request.GLProposedLimit > 5000000)
                            {
                                riskLevel = "High";
                                riskClass = "danger";
                                riskIcon = "fa-exclamation-triangle";
                            }
                            else if (Model.Request.GLProposedLimit > 1000000)
                            {
                                riskLevel = "Medium";
                                riskClass = "warning";
                                riskIcon = "fa-exclamation-circle";
                            }
                        }
                        
                        <div class="d-flex align-items-center mb-3">
                            <div class="me-3">
                                <i class="fas @riskIcon fa-2x text-@riskClass"></i>
                            </div>
                            <div>
                                <h6 class="mb-0">Risk Level: <span class="text-@riskClass">@riskLevel</span></h6>
                                <small class="text-muted">Based on proposed limit amount</small>
                            </div>
                        </div>
                        
                        <div class="risk-factors">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>Amount Risk:</span>
                                <span class="badge bg-@riskClass bg-opacity-10 text-@riskClass">@riskLevel</span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span>Documentation:</span>
                                <span class="badge bg-@(Model.Request.HasSupportingDocuments ? "success" : "warning") bg-opacity-10 text-@(Model.Request.HasSupportingDocuments ? "success" : "warning")">
                                    @(Model.Request.HasSupportingDocuments ? "Complete" : "Incomplete")
                                </span>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Description:</span>
                                <span class="badge bg-@(string.IsNullOrEmpty(Model.Request.BriefDescription) ? "warning" : "success") bg-opacity-10 text-@(string.IsNullOrEmpty(Model.Request.BriefDescription) ? "warning" : "success")">
                                    @(string.IsNullOrEmpty(Model.Request.BriefDescription) ? "Missing" : "Provided")
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function approveRequest() {
            if (confirm('Are you sure you want to approve this request?')) {
                submitAction('@Url.Action("Approve")', 'Request approved successfully!');
            }
        }

        function rejectRequest() {
            const comments = $('#comments').val().trim();
            if (!comments) {
                toastr.warning('Please provide comments explaining the reason for rejection.');
                $('#comments').focus();
                return;
            }
            
            if (confirm('Are you sure you want to reject this request?')) {
                submitAction('@Url.Action("Reject")', 'Request rejected successfully!');
            }
        }

        function requestRevision() {
            const comments = $('#comments').val().trim();
            if (!comments) {
                toastr.warning('Please provide comments explaining what revisions are needed.');
                $('#comments').focus();
                return;
            }
            
            if (confirm('Are you sure you want to request revisions for this request?')) {
                submitAction('@Url.Action("RequestRevision")', 'Revision requested successfully!');
            }
        }

        function submitAction(url, successMessage) {
            const form = $('#approvalForm');
            const formData = form.serialize();
            
            // Disable buttons to prevent double submission
            form.find('button').prop('disabled', true);
            
            $.post(url, formData)
                .done(function(response) {
                    toastr.success(successMessage);
                    setTimeout(() => {
                        window.location.href = '@Url.Action("Index")';
                    }, 1500);
                })
                .fail(function(xhr) {
                    const error = xhr.responseJSON?.message || 'An error occurred. Please try again.';
                    toastr.error(error);
                    form.find('button').prop('disabled', false);
                });
        }
    </script>

    <style>
        .page-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #333;
        }

        .timeline {
            position: relative;
            padding-left: 35px;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 17px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: linear-gradient(to bottom, #007bff, #e9ecef);
        }

        .timeline-item {
            position: relative;
            margin-bottom: 35px;
            padding: 10px 0;
        }

        .timeline-item:last-child {
            margin-bottom: 0;
        }

        .timeline-item.timeline-pending {
            animation: pulse 2s infinite;
        }

        .timeline-item.timeline-pending .timeline-content {
            animation: glow 2s infinite alternate;
        }

        .timeline-item.timeline-notification {
            opacity: 0.9;
        }

        .timeline-marker {
            position: absolute;
            left: -26px;
            top: 0;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            border: 3px solid #fff;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2;
        }

        .timeline-marker.bg-primary {
            animation: pulse-ring 2s infinite;
        }

        .timeline-content {
            padding-left: 20px;
            background: #fff;
            border-radius: 8px;
            padding: 15px 20px;
            box-shadow: 0 1px 4px rgba(0,0,0,0.05);
            border: 1px solid #f0f0f0;
            min-height: 60px;
        }

        .timeline-pending .timeline-content {
            border-left: 4px solid #007bff;
            background: linear-gradient(135deg, #e3f2fd, #fff);
            position: relative;
        }

        .timeline-pending .timeline-content::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -6px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #007bff, #0056b3);
            border-radius: 10px;
            z-index: -1;
            animation: border-pulse 2s infinite;
        }

        .timeline-title {
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: #333;
        }

        .timeline-text {
            font-size: 0.85rem;
            line-height: 1.5;
            margin-bottom: 8px;
        }

        .timeline-dates {
            background: #f8f9fa;
            border-radius: 6px;
            padding: 8px 12px;
            border-left: 3px solid #e9ecef;
        }

        .timeline-dates small {
            font-size: 0.75rem;
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.02);
            }
            100% {
                transform: scale(1);
            }
        }

        @@keyframes glow {
            0% {
                box-shadow: 0 1px 4px rgba(0,0,0,0.05), 0 0 0 0 rgba(0, 123, 255, 0.3);
            }
            100% {
                box-shadow: 0 1px 4px rgba(0,0,0,0.05), 0 0 15px rgba(0, 123, 255, 0.6);
            }
        }

        @@keyframes border-pulse {
            0% {
                opacity: 0.5;
                transform: scale(1);
            }
            50% {
                opacity: 1;
                transform: scale(1.005);
            }
            100% {
                opacity: 0.5;
                transform: scale(1);
            }
        }

        @@keyframes pulse-ring {
            0% {
                transform: scale(1);
                box-shadow: 0 2px 8px rgba(0,0,0,0.15), 0 0 0 0 rgba(0, 123, 255, 0.7);
            }
            70% {
                transform: scale(1);
                box-shadow: 0 2px 8px rgba(0,0,0,0.15), 0 0 0 10px rgba(0, 123, 255, 0);
            }
            100% {
                transform: scale(1);
                box-shadow: 0 2px 8px rgba(0,0,0,0.15), 0 0 0 0 rgba(0, 123, 255, 0);
            }
        }

        .risk-factors {
            font-size: 0.875rem;
        }

        .display-6 {
            font-size: 2rem;
        }

        .sticky-top {
            z-index: 1020;
        }

        .card {
            transition: box-shadow 0.15s ease-in-out;
        }

        .btn-lg {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
        }

        .form-text {
            font-size: 0.75rem;
        }
    </style>
}