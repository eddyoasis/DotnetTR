@using TradingLimitMVC.Models.AppSettings
@model TradingLimitMVC.Models.PurchaseRequisition
@{
    ViewData["Title"] = "Create Purchase Requisition";
}
<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
    }

    .page-wrapper {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        padding: 20px 0;
    }

    .main-container {
        background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
        border: none;
        margin: 20px auto;
        padding: 0;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        max-width: 1400px;
    }

    .header-section {
        background: linear-gradient(135deg, #0066cc, #004499);
        border-bottom: none;
        padding: 20px 25px;
        color: white;
        text-align: center;
    }

    .header-title {
        font-size: 24px;
        font-weight: 700;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .form-content {
        padding: 25px;
    }

    .section-header {
        background-color: #f8f9fa;
        color: #333;
        padding: 12px 20px;
        margin: 0 -25px 20px -25px;
        font-weight: 600;
        font-size: 16px;
        border: 1px solid #ddd;
        border-left: none;
        border-right: none;
    }

    .form-row {
        margin-bottom: 20px;
    }

    .form-label {
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 8px;
        color: #444;
        display: block;
    }

    .form-control, .form-select {
        font-size: 14px;
        padding: 12px 15px;
        border: 2px solid #e1e5e9;
        border-radius: 10px;
        transition: all 0.3s ease;
        background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
        width: 100%;
    }

        .form-control:focus, .form-select:focus {
            border-color: #0066cc;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            transform: translateY(-1px);
            outline: none;
        }

    .total-amount-section {
        background: linear-gradient(135deg, var(--primary-color), #004499);
        color: white;
        padding: 25px;
        border-radius: 12px;
        margin-bottom: 25px;
        box-shadow: 0 5px 15px rgb(26 159 214 / 32%);
    }

    .total-amount-label {
        font-size: 16px;
        font-weight: 700;
        margin-bottom: 10px;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .total-amount-input {
        font-size: 16px;
        font-weight: 700;
        padding: 15px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        background: rgba(255, 255, 255, 0.9);
        color: black;
        border-radius: 10px;
    }

    .checkbox-group {
        display: flex;
        gap: 25px;
        margin: 15px 0;
        flex-wrap: wrap;
        padding: 20px;
        background: linear-gradient(145deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
        border: 2px solid #e9ecef;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px 15px;
        background: white;
        border-radius: 25px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

        .form-check:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

    .form-check-input {
        margin: 0;
        width: 18px;
        height: 18px;
        accent-color: #0066cc;
    }

    .form-check-label {
        font-size: 14px;
        margin: 0;
        font-weight: 500;
        color: #555;
    }

    .cost-center-section {
        margin: 25px 0;
        background: linear-gradient(145deg, #fff 0%, #f8f9fa 100%);
        padding: 20px;
        border-radius: 15px;
        border: 2px solid #e9ecef;
    }

    .cost-center-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 15px;
    }

        .cost-center-header h6 {
            color: #0066cc;
            margin: 0;
            font-weight: 600;
        }

    .add-cost-center {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 14px;
        border-radius: 25px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }

        .add-cost-center:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
        }

    .cost-center-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 13px;
        border: 1px solid #ddd;
        margin-top: 15px;
    }

        .cost-center-table th {
            background-color: #0066cc;
            color: white;
            padding: 12px 8px;
            text-align: center;
            border: 1px solid #ddd;
            font-weight: 600;
            font-size: 12px;
        }

        .cost-center-table td {
            padding: 8px;
            border: 1px solid #ddd;
            background: white;
            text-align: center;
        }

        .cost-center-table tr:nth-child(even) td {
            background-color: #f9f9f9;
        }

        .cost-center-table tr:hover td {
            background-color: #f0f0f0;
        }

        .cost-center-table input, .cost-center-table select {
            border: none;
            width: 100%;
            padding: 4px 8px;
            font-size: 12px;
            text-align: center;
            background: transparent;
            outline: none;
        }

            .cost-center-table input:focus, .cost-center-table select:focus {
                outline: 2px solid #0066cc;
                background-color: #fff;
            }

    .delete-icon {
        color: #dc3545;
        cursor: pointer;
        font-size: 16px;
        margin-left: 5px;
        transition: all 0.3s ease;
    }

        .delete-icon:hover {
            color: #c82333;
            transform: scale(1.2);
        }

    .upload-area {
        border: 3px dashed #0066cc;
        border-radius: 15px;
        padding: 50px;
        text-align: center;
        background: linear-gradient(145deg, #f8f9ff 0%, #e6f0ff 100%);
        margin-bottom: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

        .upload-area:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.2);
            border-color: #4facfe;
        }

        .upload-area.drag-over {
            background: linear-gradient(145deg, #e6f0ff 0%, #cce0ff 100%);
            border-color: #4facfe;
            transform: scale(1.02);
        }

    .upload-icon {
        font-size: 40px;
        color: #0066cc;
        margin-bottom: 15px;
    }

    .upload-text {
        font-size: 16px;
        color: #0066cc;
        font-weight: 500;
    }

    .file-preview-list {
        margin-top: 15px;
    }

    .file-preview-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        border: 2px solid #e9ecef;
        margin-bottom: 10px;
        border-radius: 10px;
        background: linear-gradient(145deg, #fff 0%, #f8f9fa 100%);
        transition: all 0.3s ease;
    }

        .file-preview-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

    .file-info {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .file-remove-btn {
        background: linear-gradient(45deg, #dc3545, #c82333);
        border: none;
        color: white;
        cursor: pointer;
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

        .file-remove-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.4);
        }

    .purchase-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 13px;
        border: 1px solid #ddd;
        margin-top: 15px;
    }

        .purchase-table th {
            background-color: #0066cc;
            color: white;
            padding: 10px 8px;
            text-align: center;
            border: 1px solid #ddd;
            font-weight: 600;
            vertical-align: middle;
            font-size: 12px;
        }

        .purchase-table td {
            border: 1px solid #ddd;
            padding: 0;
            text-align: center;
            vertical-align: middle;
            height: 40px;
            background: white;
        }

        .purchase-table input, .purchase-table select {
            border: none;
            width: 100%;
            height: 38px;
            padding: 4px 8px;
            font-size: 11px;
            text-align: center;
            background: transparent;
            outline: none;
        }

            .purchase-table input:focus, .purchase-table select:focus {
                outline: 2px solid #0066cc;
                background-color: #fff;
            }

    .action-buttons {
        margin-top: 30px;
        display: flex;
        gap: 15px;
        justify-content: center;
    }

    .btn-submit {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 16px;
        border-radius: 25px;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 6px 20px rgba(40, 167, 69, 0.3);
    }

        .btn-submit:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
        }

    .btn-clear {
        background: linear-gradient(45deg, #6c757d, #495057);
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 16px;
        border-radius: 25px;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 6px 20px rgba(108, 117, 125, 0.3);
    }

        .btn-clear:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
        }

    .required {
        color: #dc3545;
        font-weight: bold;
    }

    .approval-preview {
        background: linear-gradient(145deg, #fff 0%, #f8f9fa 100%);
        border: 2px solid #0066cc;
        border-radius: 15px;
        padding: 20px;
        margin: 25px 0;
    }

        .approval-preview h6 {
            color: #0066cc;
            font-weight: 700;
            margin-bottom: 15px;
        }

    .approval-step {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        margin-bottom: 10px;
        background: white;
        border-radius: 10px;
        border-left: 4px solid #6c757d;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

        .approval-step.active {
            border-left-color: #28a745;
        }

    .step-number {
        background: #0066cc;
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        margin-right: 15px;
    }

    .step-info {
        flex: 1;
    }

    .step-role {
        font-weight: 600;
        color: #333;
    }

    .step-approver {
        font-size: 13px;
        color: #666;
        word-break: break-word; /* Allow long emails to wrap */
        font-weight: 500;
    }

    .approval-info p {
        word-break: break-word; /* Prevent email overflow */
    }

    .cost-center-note {
        margin-top: 15px;
        padding: 10px;
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        font-size: 13px;
        color: #856404;
    }

    .distribution-summary {
        background: #e8f5e9;
        padding: 15px;
        border-radius: 10px;
        margin-top: 15px;
        border: 2px solid #28a745;
    }

        .distribution-summary .summary-item {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
            font-weight: 600;
        }

        .distribution-summary .summary-total {
            border-top: 2px solid #28a745;
            padding-top: 10px;
            margin-top: 10px;
            font-size: 18px;
            color: #28a745;
        }

    .text-muted {
        color: white;
    }

    .step-reason {
        font-size: 11px;
        color: #666;
        margin-top: 5px;
        font-style: italic;
    }

    #signedPdfSection {
        margin-top: 20px;
        padding: 20px;
        background: #fff3cd;
        border-radius: 10px;
        border: 2px dashed #ffc107;
    }

        #signedPdfSection .upload-area {
            border: 3px dashed #dc3545;
            border-radius: 15px;
            padding: 50px;
            text-align: center;
            background: linear-gradient(145deg, #ffe6e6 0%, #fff0f0 100%);
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

            #signedPdfSection .upload-area:hover {
                transform: translateY(-3px);
                box-shadow: 0 10px 30px rgba(220, 53, 69, 0.3);
                border-color: #bd2130;
            }

            #signedPdfSection .upload-area.drag-over {
                background: linear-gradient(145deg, #ffcccc 0%, #ffe6e6 100%);
                border-color: #bd2130;
                transform: scale(1.02);
            }

        #signedPdfSection .upload-icon {
            font-size: 40px;
            color: #dc3545;
            margin-bottom: 15px;
        }

        #signedPdfSection .upload-text {
            font-size: 16px;
            color: #dc3545;
            font-weight: 500;
        }

    #signedPdfPreview {
        margin-top: 15px;
    }

        #signedPdfPreview .file-preview-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border: 2px solid #dc3545;
            margin-bottom: 10px;
            border-radius: 10px;
            background: linear-gradient(145deg, #fff 0%, #fff5f5 100%);
            transition: all 0.3s ease;
        }

            #signedPdfPreview .file-preview-item:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(220, 53, 69, 0.2);
            }

    .vendor-dropdown {
        padding: 6px 8px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        font-size: 12px;
        background-color: white;
    }

        .vendor-dropdown:focus {
            outline: 2px solid #0066cc;
            border-color: #0066cc;
        }

    .gst-dropdown {
        width: 100%;
        padding: 4px 8px;
        font-size: 11px;
        text-align: center;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background-color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .gst-dropdown:focus {
            outline: 2px solid #0066cc;
            border-color: #0066cc;
            background-color: #fff;
        }

        .gst-dropdown:hover {
            border-color: #0066cc;
        }

    input[name="ContactPhoneNo"]:invalid {
        border-color: #dc3545;
    }

    input[name="ContactPhoneNo"]:valid {
        border-color: #28a745;
    }

    .phone-validation {
        display: block;
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
    }

    .phone-validation-temp {
        animation: fadeInOut 3s ease-in-out;
    }
    @@keyframes fadeInOut {
        0%

    {
        opacity: 0;
    }

    10% {
        opacity: 1;
    }

    90% {
        opacity: 1;
    }

    100% {
        opacity: 0;
    }

    }

</style>
<div class="page-wrapper">
    <form asp-action="Create" method="post" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

        <div class="main-container">
            <!-- Header -->
            <div class="header-section">
                <h1 class="header-title">Purchase Requisition Form</h1>
                <p style="margin: 10px 0 0 0; opacity: 0.9;">Create a new purchase requisition</p>
            </div>
            <div class="form-content">
                <!-- STEP 1: Quotation Details -->
                <div class="section-header">Step 1: Quotation Details</div>
                <div class="total-amount-section">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="total-amount-label">
                                Total Quotation Amount (<span id="displayCurrency">---</span>)
                            </label>
                            <input asp-for="TotalAmount" type="number" step="0.01"
                                   class="form-control total-amount-input"
                                   id="totalQuotationAmount"
                                   readonly
                                   style="background: #e9ecef; cursor: not-allowed; font-weight: 700; color: #0066cc;"
                                   placeholder="Select currency first">
                            <span asp-validation-for="TotalAmount" class="text-danger"></span>
                            <small class="text-muted whitefont" style="font-size: 11px;">
                                Auto-calculated from items in <strong><span id="displayCurrency2">---</span></strong>
                            </small>
                        </div>
                        <div class="col-md-3">
                            <label class="total-amount-label">Currency <span class="required">*</span></label>
                            <select asp-for="QuotationCurrency" class="form-control total-amount-input"
                                    id="quotationCurrency"
                                    onchange="updateExchangeRate(this.value); calculateTotal();" required>
                                <option value="">Select Currency</option>
                                <option value="SGD">SGD - Singapore Dollar</option>
                                <option value="USD">USD - US Dollar</option>
                                <option value="NTD">NTD - Taiwan Dollar</option>
                                <option value="MYR">MYR - Malaysian Ringgit</option>
                                <option value="HKD">HKD - Hong Kong Dollar</option>
                            </select>
                            <span asp-validation-for="QuotationCurrency" class="text-danger"></span>
                            <small class="text-muted whitefont" style="font-size: 11px;">Currency must be selected</small>
                        </div>
                        <div class="col-md-3">
                            <label class="total-amount-label">Exchange Rate to SGD</label>
                            <input asp-for="ExchangeRateToSGD" type="number" step="0.0001"
                                   class="form-control total-amount-input"
                                   id="exchangeRate" readonly
                                   style="background: #e9ecef;">
                            <small class="text-muted whitefont" style="font-size: 11px;">Auto-filled from system</small>
                        </div>
                        <div class="col-md-3">
                            <label class="total-amount-label">SGD Value</label>
                            <input type="text" id="contractValueSGD"
                                   class="form-control total-amount-input" readonly
                                   style="background: #d1ecf1; font-weight: bold; color: #0c5460;">
                            <small class="text-muted whitefont" style="font-size: 11px;">For reference only</small>
                        </div>

                    </div>
                </div>
                <!-- STEP 2: Purchase List Section -->
                <div class="section-header">Step 2: Purchase List Section</div>
                <div class="main-container mt-3">
                    <div class="form-content">
                        <button class="add-cost-center mb-3" type="button" onclick="addPurchaseItem()">
                            Add Purchase Item
                        </button>
                        <div class="table-responsive">
                            <table class="purchase-table" id="purchaseItemsTable">
                                <thead>
                                    <tr>
                                        <th rowspan="2" style="width: 60px;">Action</th>
                                        <th rowspan="2" style="width: 150px;">Description</th>
                                        <th rowspan="2" style="width: 80px;">Quantity</th>
                                        <th rowspan="2" style="width: 100px;">Unit Price</th>
                                        <th colspan="2" style="width: 160px;">Discount</th>
                                        <th rowspan="2" style="width: 100px;">Amount</th>
                                        <th rowspan="2" style="width: 80px;">GST</th>
                                        <th rowspan="2" style="width: 150px;">Supplier</th>
                                        <th rowspan="2" style="width: 120px;">Payment Terms (Days)</th>
                                        <th rowspan="2" style="width: 120px;">Fixed Assets</th>
                                        <th rowspan="2" style="width: 120px;">Assets Class</th>
                                        <th colspan="2" style="width: 200px;">Maintenance</th>
                                    </tr>
                                    <tr>
                                        <th style="width: 80px;">%</th>
                                        <th style="width: 80px;">Amount</th>
                                        <th style="width: 100px;">From</th>
                                        <th style="width: 100px;">To</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>
                                            <i class="delete-icon fas fa-trash" onclick="removePurchaseItem(this)"></i>
                                        </td>
                                        <td>
                                            <input type="text" name="Items[0].Description" placeholder="Item description" style="width: 100%;">
                                        </td>
                                        <td>
                                            <input type="number" name="Items[0].Quantity" value="1" min="1" onchange="calculateAmount(this)" style="width: 100%;">
                                        </td>
                                        <td>
                                            <input type="number" name="Items[0].UnitPrice" step="0.01" placeholder="0.00" onchange="calculateAmount(this)" style="width: 100%;">
                                        </td>
                                        <td>
                                            <input type="number" name="Items[0].DiscountPercent" max="100" placeholder="%" onchange="calculateAmount(this)" style="width: 100%;">
                                        </td>
                                        <td>
                                            <input type="number" name="Items[0].DiscountAmount" step="0.01" placeholder="0.00" onchange="calculateAmount(this)" style="width: 100%;">
                                        </td>
                                        <td>
                                            <input type="number" name="Items[0].Amount" step="0.01" readonly style="background-color: #f8f9fa; width: 100%;">
                                        </td>
                                        <td>
                                            <select name="Items[0].GST"
                                                    class="form-select gst-dropdown"
                                                    onchange="calculateTotal()"
                                                    style="width: 100%; padding: 4px 8px; font-size: 11px; text-align: center; border: 1px solid #dee2e6; border-radius: 4px;">
                                                <option value="0">0%</option>
                                                @if (ViewBag.GSTOptions != null)
                                                {
                                                    @foreach (var gst in ViewBag.GSTOptions)
                                                    {
                                                        <option value="@gst">@gst%</option>
                                                    }
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <select name="Items[0].SuggestedSupplier"
                                                    class="vendor-dropdown"
                                                    data-row-index="0"
                                                    onchange="loadVendorDetails(this)"
                                                    style="width: 100%;"
                                                    required>
                                                <option value="">Select Vendor *</option>
                                                @if (ViewBag.Vendors != null)
                                                {
                                                    @foreach (var vendor in ViewBag.Vendors)
                                                    {
                                                        <option value="@vendor.DDName"
                                                                data-vendor-id="@vendor.ID"
                                                                data-vendor-code="@vendor.DDID">
                                                            @vendor.DDName
                                                        </option>
                                                    }
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <input type="text"
                                                   name="Items[0].PaymentTerms"
                                                   placeholder="Days *"
                                                   style="width: 100%;"
                                                   required>
                                        </td>
                                        <td style="text-align: center;">
                                            <input type="checkbox"
                                                   name="Items[0].IsFixedAsset"
                                                   value="true"
                                                   onchange="updateApprovalPreview()"
                                                   style="width: 20px; height: 20px;">
                                        </td>
                                        <td>
                                            <input type="text" name="Items[0].AssetsClass" placeholder="Assets class" style="width: 100%;">
                                        </td>
                                        <td>
                                            <input type="date" name="Items[0].MaintenanceFrom" style="width: 100%;">
                                        </td>
                                        <td>
                                            <input type="date" name="Items[0].MaintenanceTo" style="width: 100%;">
                                        </td>
                                    </tr>
                                </tbody>
                                <tfoot>
                                    <tr style="background: #f8f9fa; font-weight: bold;">
                                        <td colspan="6" style="text-align: right;">SUBTOTAL (before GST)</td>
                                        <td id="totalAmount">$0.00</td>
                                        <td colspan="7"></td>
                                    </tr>
                                    <tr style="background: #fff3cd; font-weight: bold;">
                                        <td colspan="6" style="text-align: right;">GST/TAX</td>
                                        <td id="totalGST" style="color: #856404;">$0.00</td>
                                        <td colspan="7"></td>
                                    </tr>
                                    <tr style="background: #0066cc; color: white; font-weight: bold; font-size: 16px;">
                                        <td colspan="6" style="text-align: right;">TOTAL (incl. GST) →</td>
                                        <td id="grandTotal" style="font-size: 18px;">$0.00</td>
                                        <td colspan="7"></td>
                                    </tr>
                                </tfoot>
                                @*  <tfoot>
                                    <tr style="background: #0066cc; color: black; font-weight: bold;">
                                        <td colspan="6">TOTAL</td>
                                        <td id="totalAmount">$0.00</td>
                                        <td id="totalGST">$0.00</td>
                                        <td colspan="6"></td>
                                    </tr>
                                </tfoot> *@
                            </table>
                        </div>
                        <!-- Items Mismatch Warning -->
                        <div id="itemsMismatchWarning" class="alert alert-warning" style="display: none; margin-top: 15px;">
                            <!-- Warning text will be inserted here by JavaScript -->
                        </div>
                    </div>
                </div>
                <div style="padding: 10px; background: #fff3cd; border-radius: 5px; margin-top: 10px; border-left: 4px solid #ffc107;">
                    <i class="fas fa-info-circle" style="color: #856404;"></i>
                    <strong>GST Selection:</strong>
                    <ul style="margin: 5px 0 0 20px; color: #856404;">
                        <li>Select GST percentage from dropdown (0% to 10%)</li>
                        <li>GST will be automatically calculated and added to the total</li>
                        <li>Default is 0% if not selected</li>
                    </ul>
                </div>
                <!-- STEP 3: Cost Center Distribution -->
                <div class="section-header">Step 3: Cost Center Distribution</div>
                <div class="cost-center-section">
                    <div class="cost-center-header">
                        <h6>Cost Center Distribution (Must equal Total Quotation Amount)</h6>
                        <button class="add-cost-center" type="button" onclick="addCostCenterRow()">
                            <i class="fas fa-plus"></i> Add Cost Center
                        </button>
                    </div>
                    <div class="alert alert-info">
                        <strong>Note:</strong> You can enter either Amount or Percentage. The system will auto-calculate the other value.
                    </div>
                    <table class="cost-center-table" id="costCenterTable">
                        <thead>
                            <tr>
                                <th style="width: 60px;">Action</th>
                                <th style="width: 200px;">Cost Center Name</th>
                                <th style="width: 150px;">Amount <span class="required">*</span></th>
                                <th style="width: 150px;">Percentage</th>
                                <th style="width: 180px;">Required Approver</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <i class="fas fa-edit"></i>
                                    <i class="delete-icon fas fa-trash" onclick="removeCostCenterRow(this)"></i>
                                </td>
                                <td>
                                    <select class="form-control form-control-sm" name="CostCenters[0].Name" onchange="updateApprover(this, 0)" required>
                                        @foreach (var dept in ViewBag.DepartmentRoles)
                                        {
                                            <option value="@dept.Key">@dept.Key</option>
                                            @* <option value="@dept.Key">@dept.Key (@dept.Value.HOD)</option> *@
                                        }
                                        @* <option value="">Select Cost Center</option>
                                        <option value="Information Technology">Information Technology</option>
                                        <option value="Human Resources">Human Resources</option>
                                        <option value="Finance">Finance</option>
                                        <option value="Operations">Operations</option>
                                        <option value="Marketing">Marketing</option>
                                        <option value="Sales">Sales</option> *@
                                    </select>
                                </td>
                                <td>
                                    <input type="number" class="form-control cost-center-amount"
                                           name="CostCenters[0].Amount" step="0.01" placeholder="0.00"
                                           onchange="updatePercentageFromAmount(this, 0)" required>
                                </td>
                                <td>
                                    <input type="number" class="form-control cost-center-percentage"
                                           step="0.01" max="100" placeholder="0.00%" readonly
                                           id="percentage_0">
                                </td>
                                <td>
                                    <select class="form-control form-control-sm" name="CostCenters[0].Approver" id="approver_0" required>
                                        @foreach (var dept in ViewBag.DepartmentRoles)
                                        {
                                            <option value="@dept.Value.HOD">@dept.Value.HOD</option>
                                        }
                                        @* <option value="">Select Approver</option>
                                        <option value="IT HOD">IT HOD - CY</option>
                                        <option value="HR HOD">HR HOD</option>
                                        <option value="Finance HOD">Finance HOD - Julie</option>
                                        <option value="Operations HOD">Operations HOD</option>
                                        <option value="Marketing HOD">Marketing HOD</option>
                                        <option value="Sales HOD">Sales HOD</option>*@                           
                                    </select>
                                </td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr style="background: #000000; font-weight: bold;">
                                <td colspan="2" style="text-align: right;">TOTAL:</td>
                                <td id="costCenterTotalAmount" style="color: #dc3545;">$0.00</td>
                                <td id="costCenterTotalPercentage" style="color: #666;">0.00%</td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                    <!-- Validation Message -->
                    <div id="distributionValidation" class="cost-center-note" style="display: none;">
                        <strong> Validation:</strong> <span id="validationMessage"></span>
                    </div>
                    <!-- Distribution Summary -->
                    <div class="distribution-summary" id="distributionSummary" style="display: none;">
                        <div class="summary-item">
                            <span>Quotation Total:</span>
                            <span id="summaryQuotationTotal">$0.00</span>
                        </div>
                        <div class="summary-item">
                            <span>Allocated Total:</span>
                            <span id="summaryAllocatedTotal">$0.00</span>
                        </div>
                        <div class="summary-item summary-total">
                            <span>Remaining:</span>
                            <span id="summaryRemaining">$0.00</span>
                        </div>
                    </div>
                </div>
                <!-- STEP 4: Request Details -->
                <div class="section-header">Step 4: Request Details</div>
                <div class="row form-row">
                    <div class="col-md-6">
                        <label asp-for="Company" class="form-label">Company <span class="required">*</span></label>
                        <select asp-for="Company" class="form-select" id="companySelect" required>
                            <option value="">Select Company</option>
                            @foreach (var company in ViewBag.Companies)
                            {
                                <option value="@company.CompanyName"
                                        data-address="@company.FullAddress">
                                    @company.CompanyName
                                </option>
                            }
                        </select>
                        <span asp-validation-for="Company" class="text-danger"></span>
                    </div>
                    @*  <div class="col-md-6">
                        <label asp-for="Department" class="form-label">Department <span class="required">*</span></label>
                        <select asp-for="Department" class="form-select" asp-items="@(new SelectList(ViewBag.Departments))">
                            <option value="">Select Department</option>
                        </select>
                        <span asp-validation-for="Department" class="text-danger"></span>
                    </div> *@
                </div>
                <div class="checkbox-group">
                    <div class="form-check">
                        <input asp-for="IsITRelated"
                               class="form-check-input"
                               type="checkbox"
                               id="IsITRelated"
                               value="true"
                               onchange="updateApprovalPreview()">
                        <label asp-for="IsITRelated" class="form-check-label">IT Related</label>
                    </div>
                    <div class="form-check">
                        <input asp-for="NoPORequired"
                               class="form-check-input"
                               type="checkbox"
                               id="NoPORequired"
                               value="true"
                               onchange="updateApprovalPreview()">
                        <label asp-for="NoPORequired" class="form-check-label">No PO Required</label>
                    </div>
                    <div class="form-check">
                        <input asp-for="SignedPDF"
                               class="form-check-input"
                               type="checkbox"
                               id="SignedPDF"
                               value="true"
                               onchange="toggleSignedPdfUpload(); updateApprovalPreview();">
                        <label asp-for="SignedPDF" class="form-check-label">Signed PAF</label>
                    </div>
                </div>
                <div class="row form-row">
                    <div class="col-md-6">
                        <label asp-for="ExpectedDeliveryDate" class="form-label">Expected Delivery Date</label>
                        <input asp-for="ExpectedDeliveryDate" type="date" class="form-control">
                    </div>
                    <div class="col-md-6">
                        <label asp-for="TypeOfPurchase" class="form-label">Type of Purchase</label>
                        <select asp-for="TypeOfPurchase" class="form-select" asp-items="@(new SelectList(ViewBag.PurchaseTypes))">
                            <option value="">Select Type</option>
                        </select>
                    </div>
                </div>
                <div class="row form-row">
                    <div class="col-md-6">
                        <label asp-for="DeliveryAddress" class="form-label">Delivery Address</label>
                        <textarea asp-for="DeliveryAddress" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label asp-for="ContactPerson" class="form-label">Contact Person</label>
                                <input asp-for="ContactPerson" type="text" class="form-control">
                            </div>
                            <div class="col-md-12">
                                <label asp-for="ContactPhoneNo" class="form-label">Contact Phone No</label>
                                <input asp-for="ContactPhoneNo" type="text" class="form-control">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row form-row">
                    <div class="col-md-12">
                        <label asp-for="ShortDescription" class="form-label">
                            Short Description<span class="required">*</span>
                        </label>
                        <input asp-for="ShortDescription"
                               type="text"
                               class="form-control"
                               placeholder="Brief description"
                               required
                               data-val="true"
                               data-val-required="Short Description is required" />
                        <span asp-validation-for="ShortDescription" class="text-danger"></span>
                    </div>
                </div>
                <!-- Reason - -->
                <div class="row form-row">
                    <div class="col-md-12">
                        <label asp-for="Reason" class="form-label">
                            Reason<span class="required">*</span>
                        </label>
                <textarea asp-for="Reason"
                      class="form-control"
                      rows="4"
                      placeholder="Explain the reason for this purchase"
                      required
                      data-val="true"
                      data-val-required="Reason is required"></textarea>
                        <span asp-validation-for="Reason" class="text-danger"></span>
                    </div>
                </div>
                <!-- STEP 5: Attachments -->
                <div class="section-header">Step 5: Attachment List</div>
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">
                        <i class="fas fa-cloud-upload-alt"></i>
                    </div>
                    <div class="upload-text">
                        Drag & drop files here or click to browse <span class="required">*</span>
                    </div>
                    <input type="file" id="fileInput" multiple accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.png"
                           style="display: none;" onchange="handleFileSelect(this)" required>
                </div>
                <small class="text-danger">At least one attachment is required</small>
                <div class="file-preview-list" id="filePreviewList"></div>
                <!-- Signed PDF Upload Section -->
                <div id="signedPdfSection" style="display: none; margin-top: 20px;">
                    <div class="alert alert-info">
                        <strong>Required:</strong> Please upload the signed PAF document.
                    </div>
                    <div class="upload-area" id="signedPdfUploadArea">
                        <div class="upload-icon">
                            <i class="fas fa-file-pdf"></i>
                        </div>
                        <div class="upload-text">
                            Drag & drop signed PAF here or click to browse <span class="required">*</span>
                        </div>
                        <input type="file"
                               id="signedPdfInput"
                               accept=".pdf"
                               style="display: none;"
                               onchange="handleSignedPdfUpload(this)">
                    </div>
                    <small class="text-danger">Only PDF files are accepted (Max 5MB)</small>
                    <div id="signedPdfPreview"></div>
                </div>
                <!-- STEP 6: Approval Path Preview -->
                <div class="section-header">Step 6: Approval Path Preview</div>
                <div class="approval-preview" id="approvalPreview">
                    <h6>Complete Approval Path</h6>
                    <div id="approvalSteps"></div>
                </div>
                <!-- Action Buttons -->
                <div class="action-buttons mt-4">
                    <button class="btn-submit" type="submit">
                        <i class="fas fa-paper-plane"></i> Submit Request
                    </button>
                    <button class="btn-clear" type="button" onclick="clearForm()">
                        <i class="fas fa-eraser"></i> Clear Form
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // ============================================
    // GLOBAL VARIABLES
    // ============================================
     let signedPdfUploaded = false;
     let costCenterIndex = 1;
     let purchaseItemIndex = 1;
     // Currency threshold mappings (in each currency)
     const THRESHOLDS = {
         NTD: { cfo: 10000, ceo: 1000000 },
         SGD: { cfo: 10000, ceo: 1000000 },
         USD: { cfo: 10000, ceo: 1000000 },
         MYR: { cfo: 10000, ceo: 1000000 }
     };

    // ============================================
    // SAFE DOM ELEMENT ACCESS
    // ============================================
    function safeSetText(elementId, text) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = text;
            return true;
        }
        console.warn(`Element #${elementId} not found`);
        return false;
    }
    function safeSetValue(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.value = value;
            return true;
        }
        console.warn(`Element #${elementId} not found`);
        return false;
    }
    function safeSetAttribute(elementId, attribute, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.setAttribute(attribute, value);
            return true;
        }
        console.warn(`Element #${elementId} not found`);
        return false;
    }

    // ============================================
    // CALCULATION FUNCTIONS FOR GST INCLUSION
    // ============================================
    function calculateTotal() {
        let itemsSubtotal = 0;
        let gstTotal = 0;
        document.querySelectorAll('#purchaseItemsTable tbody tr').forEach(row => {
            const amount = parseFloat(row.querySelector('input[name*="Amount"]')?.value) || 0;
            const gstSelect = row.querySelector('select[name*="GST"]');
            itemsSubtotal += amount;
            if (gstSelect && gstSelect.value) {
                // Get numeric GST rate from dropdown
                let gstPercent = parseFloat(gstSelect.value) || 0;
                if (gstPercent > 0) {
                    gstTotal += (amount * gstPercent / 100);
                }
            }
        });
        const currency = $('#quotationCurrency').val();
        // Display subtotal and GST separately
        document.getElementById('totalAmount').textContent = itemsSubtotal.toFixed(2);
        document.getElementById('totalGST').textContent = gstTotal.toFixed(2);
        updateGrandTotalDisplay();
        if (currency) {
            // : Total Quotation Amount = Subtotal + GST (tax-inclusive)
            const totalWithGST = itemsSubtotal + gstTotal;
            document.getElementById('totalQuotationAmount').value = totalWithGST.toFixed(2);
            console.log(`  Calculation Summary:`);
            console.log(`   Subtotal: ${currency} ${itemsSubtotal.toFixed(2)}`);
            console.log(`   GST: ${currency} ${gstTotal.toFixed(2)}`);
            console.log(`   Total (with GST): ${currency} ${totalWithGST.toFixed(2)}`);
            calculateContractValueSGD();
            recalculateAllCostCenterPercentages();
            validateDistribution();
            updateApprovalPreview();
        }
    }
    // Update grand total display in footer
    function updateGrandTotalDisplay() {
        const subtotal = parseFloat(document.getElementById('totalAmount').textContent.replace('$', '')) || 0;
        const gst = parseFloat(document.getElementById('totalGST').textContent.replace('$', '')) || 0;
        const grandTotal = subtotal + gst;

        document.getElementById('grandTotal').textContent = `$${grandTotal.toFixed(2)}`;
    }
    function recalculateAllCostCenterPercentages() {
        const totalAmount = parseFloat($('#totalQuotationAmount').val()) || 0;
        if (totalAmount === 0) return;
        document.querySelectorAll('.cost-center-amount').forEach((input, index) => {
            const amount = parseFloat(input.value) || 0;
            const percentage = (amount / totalAmount * 100).toFixed(2);
            const percentageInput = document.getElementById(`percentage_${index}`);
            if (percentageInput) {
                percentageInput.value = percentage;
            }
        });
    }
    function calculateAmount(input) {
        const row = input.closest('tr');
        const quantity = parseFloat(row.querySelector('input[name*="Quantity"]').value) || 0;
        const unitPrice = parseFloat(row.querySelector('input[name*="UnitPrice"]').value) || 0;
        const discountPercentInput = row.querySelector('input[name*="DiscountPercent"]');
        const discountAmountInput = row.querySelector('input[name*="DiscountAmount"]');
        const amountInput = row.querySelector('input[name*="Amount"]');
        let discountPercent = parseFloat(discountPercentInput.value) || 0;
        let discountAmount = parseFloat(discountAmountInput.value) || 0;
        let totalBeforeDiscount = quantity * unitPrice;
        let finalDiscount = 0;
        if (discountPercent > 0) {
            finalDiscount = (totalBeforeDiscount * discountPercent) / 100;
            discountAmountInput.value = finalDiscount.toFixed(2);
        } else if (discountAmount > 0) {
            finalDiscount = discountAmount;
            if (totalBeforeDiscount > 0) {
                discountPercent = (discountAmount / totalBeforeDiscount * 100);
                discountPercentInput.value = discountPercent.toFixed(2);
            }
        } else {
            discountPercentInput.value = '0';
            discountAmountInput.value = '0.00';
        }
        const finalAmount = totalBeforeDiscount - finalDiscount;
        amountInput.value = finalAmount.toFixed(2);
        calculateTotal();
    }
    function loadVendorDetails(selectElement) {
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        const vendorId = selectedOption.getAttribute('data-vendor-id');
        const vendorCode = selectedOption.getAttribute('data-vendor-code');

        if (vendorId) {
            console.log('Vendor selected:', {
                id: vendorId,
                code: vendorCode,
                name: selectElement.value
            });
        }
    }
    // ============================================
    // PURCHASE ITEM FUNCTIONS
    // ============================================
    function addPurchaseItem() {
        const tbody = document.querySelector('#purchaseItemsTable tbody');
        const currentIndex = purchaseItemIndex++;
        let vendorOptionsHtml = '<option value="">Select Vendor</option>';
        @if (ViewBag.Vendors != null)
        {
                foreach (var vendor in ViewBag.Vendors)
                {
                       <text>
                       vendorOptionsHtml += '<option value="@vendor.DDName" data-vendor-id="@vendor.ID" data-vendor-code="@vendor.DDID">@vendor.DDName</option>';
                       </text>
                }
                    
        }
        let gstOptionsHtml = '<option value="0">0%</option>';
        @if (ViewBag.GSTOptions != null)
        {
            foreach (var gst in ViewBag.GSTOptions)
            {
                <text>
                gstOptionsHtml += '<option value="@gst">@gst%</option>';
                </text>
            }
        }
        const newRow = document.createElement('tr');
        newRow.innerHTML = `
            <td><i class="delete-icon fas fa-trash" onclick="removePurchaseItem(this)"></i></td>
            <td><input type="text" name="Items[${currentIndex}].Description" placeholder="Item description" style="width: 100%;"></td>
            <td><input type="number" name="Items[${currentIndex}].Quantity" value="1" min="1" onchange="calculateAmount(this)" style="width: 100%;"></td>
            <td><input type="number" name="Items[${currentIndex}].UnitPrice" step="0.01" placeholder="0.00" onchange="calculateAmount(this)" style="width: 100%;"></td>
            <td><input type="number" name="Items[${currentIndex}].DiscountPercent" step="0.01" max="100" placeholder="%" onchange="calculateAmount(this)" style="width: 100%;"></td>
            <td><input type="number" name="Items[${currentIndex}].DiscountAmount" placeholder="0.00" onchange="calculateAmount(this)" style="width: 100%;"></td>
            <td><input type="number" name="Items[${currentIndex}].Amount" step="0.01" readonly style="background-color: #f8f9fa; width: 100%;"></td>
            <td><select name="Items[${currentIndex}].GST"class="form-select gst-dropdown"onchange="calculateTotal()"style="width: 100%; padding: 4px 8px; font-size: 11px; text-align: center; border: 1px solid #dee2e6; border-radius: 4px;">${gstOptionsHtml}</select></td>
            <td><select name="Items[${currentIndex}].SuggestedSupplier" class="vendor-dropdown" data-row-index="${currentIndex}" onchange="loadVendorDetails(this)" style="width: 100%;">${vendorOptionsHtml}</select></td>
            <td><input type="text" name="Items[${currentIndex}].PaymentTerms" placeholder="Days" style="width: 100%;"></td>
            <td style="text-align: center;"><input type="checkbox"name="Items[${currentIndex}].IsFixedAsset"value="true"onchange="updateApprovalPreview()"style="width: 20px; height: 20px;"></td>
            <td><input type="text" name="Items[${currentIndex}].AssetsClass" placeholder="Assets class" style="width: 100%;"></td>
            <td><input type="date" name="Items[${currentIndex}].MaintenanceFrom" style="width: 100%;"></td>
            <td><input type="date" name="Items[${currentIndex}].MaintenanceTo" style="width: 100%;"></td>
        `;
        tbody.appendChild(newRow);
    }
    // ============================================
    // GST VALIDATION FUNCTION (0-10% RANGE)
    // ============================================
    // function validateGST(input) {
    //     let value = parseFloat(input.value) || 0;
    //     // Enforce 0-10 range
    //     if (value < 0) {
    //         value = 0;
    //         alert(' GST percentage cannot be negative. Setting to 0%');
    //     } else if (value > 10) {
    //         value = 10;
    //         alert(' GST percentage cannot exceed 10%. Maximum value is 10%');
    //     }
    //     //  : Store with % symbol
    //     input.value = value;
    //     input.setAttribute('data-gst-rate', value); // Store numeric value for calculations
    //     // Visual feedback
    //     if (value >= 0 && value <= 10) {
    //         input.style.border = '2px solid #28a745';
    //         setTimeout(() => {
    //             input.style.border = '';
    //         }, 1000);
    //     }
    // }

    function removePurchaseItem(element) {
        const row = element.closest('tr');
        const tbody = row.parentNode;
        if (tbody.children.length > 1) {
            row.remove();
            calculateTotal();
        } else {
            alert('At least one purchase item is required.');
        }
    }
    // ============================================
    // COST CENTER FUNCTIONS
    // ============================================
    function updateApprover(selectElement, index) {
        const departmentRoles = @Html.Raw(Json.Serialize(ViewBag.DepartmentRoles));

        const costCenter = selectElement.value;
        const approverSelect = document.getElementById(`approver_${index}`);

        if (departmentRoles[costCenter] && approverSelect) {
            approverSelect.value = departmentRoles[costCenter].hod;
        }
        
        validateDistribution();
        updateApprovalPreview();
    }
    // function updateApprover(selectElement, index) {
    //     const costCenter = selectElement.value;
    //     const approverSelect = document.getElementById(`approver_${index}`);
    //     const costCenterToHOD = {
    //         'Information Technology': 'IT HOD',
    //         'Human Resources': 'HR HOD',
    //         'Finance': 'Finance HOD',
    //         'Operations': 'Operations HOD',
    //         'Marketing': 'Marketing HOD',
    //         'Sales': 'Sales HOD'
            
    //     };
    //     if (costCenterToHOD[costCenter] && approverSelect) {
    //         approverSelect.value = costCenterToHOD[costCenter];
    //     }
    //     validateDistribution();
    //     updateApprovalPreview();
    // }
    function updatePercentageFromAmount(input, index) {
        const totalAmount = parseFloat($('#totalQuotationAmount').val()) || 0;
        const amount = parseFloat(input.value) || 0;
        if (totalAmount > 0) {
            const percentage = (amount / totalAmount * 100).toFixed(2);
            $(`#percentage_${index}`).val(percentage);
        }
        validateDistribution();
        updateApprovalPreview();
    }
    function validateDistribution() {
        const quotationTotal = parseFloat($('#totalQuotationAmount').val()) || 0;
        let totalAmount = 0;
        let totalPercentage = 0;
        document.querySelectorAll('.cost-center-amount').forEach(input => {
            const value = parseFloat(input.value) || 0;
            totalAmount += value;
        });
        if (quotationTotal > 0) {
            totalPercentage = (totalAmount / quotationTotal * 100).toFixed(2);
        }
        $('#costCenterTotalAmount').text('$' + totalAmount.toFixed(2));
        $('#costCenterTotalPercentage').text(totalPercentage + '%');
        $('#summaryQuotationTotal').text('$' + quotationTotal.toFixed(2));
        $('#summaryAllocatedTotal').text('$' + totalAmount.toFixed(2));
        $('#summaryRemaining').text('$' + (quotationTotal - totalAmount).toFixed(2));
        $('#distributionSummary').show();
        const validationDiv = document.getElementById('distributionValidation');
        const messageSpan = document.getElementById('validationMessage');
        if (!validationDiv || !messageSpan) return true;
        validationDiv.style.display = 'block';
        if (totalAmount === 0) {
            validationDiv.style.background = '#fff3cd';
            validationDiv.style.borderColor = '#ffeaa7';
            messageSpan.textContent = 'Please add cost centers to match quotation total';
            messageSpan.style.color = '#856404';
            $('#costCenterTotalAmount').css('color', '#ffc107');
            return false;
        }
        if (totalAmount > quotationTotal) {
            validationDiv.style.background = '#f8d7da';
            validationDiv.style.borderColor = '#f5c6cb';
            messageSpan.textContent = `Total $${totalAmount.toFixed(2)} EXCEEDS quotation total $${quotationTotal.toFixed(2)}`;
            messageSpan.style.color = '#721c24';
            $('#costCenterTotalAmount').css('color', '#dc3545');
            return false;
        }
        if (Math.abs(totalAmount - quotationTotal) < 0.01) {
            validationDiv.style.background = '#d4edda';
            validationDiv.style.borderColor = '#c3e6cb';
            messageSpan.textContent = `Valid  (Matches quotation total)`;
            messageSpan.style.color = '#155724';
            $('#costCenterTotalAmount').css('color', '#28a745');
            return true;
        } else {
            validationDiv.style.background = '#fff3cd';
            validationDiv.style.borderColor = '#ffeaa7';
            const remaining = quotationTotal - totalAmount;
            messageSpan.textContent = `Current: $${totalAmount.toFixed(2)}, Remaining: $${remaining.toFixed(2)} of $${quotationTotal.toFixed(2)} quotation`;
            messageSpan.style.color = '#856404';
            $('#costCenterTotalAmount').css('color', '#ffc107');
            return remaining >= 0;
        }
    }
    function addCostCenterRow() {
        const tbody = document.querySelector('#costCenterTable tbody');
        const currentIndex = costCenterIndex++;
        const newRow = document.createElement('tr');
        newRow.innerHTML = `
            <td>
                <i class="fas fa-edit"></i>
                <i class="delete-icon fas fa-trash" onclick="removeCostCenterRow(this)"></i>
            </td>
            <td>
                <select class="form-control form-control-sm" name="CostCenters[${currentIndex}].Name" onchange="updateApprover(this, ${currentIndex})" required>
                    @foreach (var dept in ViewBag.DepartmentRoles)
                    {
                        <option value="@dept.Key">@dept.Key</option>
                    }
                </select>
            </td>
            <td>
                <input type="number" class="form-control form-control-sm cost-center-amount"
                       name="CostCenters[${currentIndex}].Amount"
                       step="0.01" min="0" placeholder="0.00"
                       onchange="updatePercentageFromAmount(this, ${currentIndex})" required>
            </td>
            <td>
                <input type="number" class="form-control form-control-sm cost-center-percentage"
                       step="0.01" max="100" placeholder="0.00%" readonly
                       id="percentage_${currentIndex}">
            </td>
            <td>
                <select class="form-control form-control-sm" name="CostCenters[${currentIndex}].Approver" id="approver_${currentIndex}" required>
                    @foreach (var dept in ViewBag.DepartmentRoles)
                    {
                        <option value="@dept.Value.HOD">@dept.Value.HOD</option>
                    }
                </select>
            </td>
        `;
        tbody.appendChild(newRow);
    }
    // function addCostCenterRow() {
    //     const tbody = document.querySelector('#costCenterTable tbody');
    //     const currentIndex = costCenterIndex++;
    //     const newRow = document.createElement('tr');
    //     newRow.innerHTML = `
    //         <td>
    //             <i class="fas fa-edit"></i>
    //             <i class="delete-icon fas fa-trash" onclick="removeCostCenterRow(this)"></i>
    //         </td>
    //         <td>
    //             <select class="form-control form-control-sm" name="CostCenters[${currentIndex}].Name" onchange="updateApprover(this, ${currentIndex})" required>
    //                 <option value="">Select Cost Center</option>
    //                 <option value="Information Technology">Information Technology</option>
    //                 <option value="Human Resources">Human Resources</option>
    //                 <option value="Finance">Finance</option>
    //                 <option value="Operations">Operations</option>
    //                 <option value="Marketing">Marketing</option>
    //                 <option value="Sales">Sales</option>
                    
    //             </select>
    //         </td>
    //         <td>
    //             <input type="number" class="form-control form-control-sm cost-center-amount"
    //                    name="CostCenters[${currentIndex}].Amount"
    //                    step="0.01" min="0" placeholder="0.00"
    //                    onchange="updatePercentageFromAmount(this, ${currentIndex})" required>
    //         </td>
    //         <td>
    //             <input type="number" class="form-control form-control-sm cost-center-percentage"
    //                    step="0.01" max="100" placeholder="0.00%" readonly
    //                    id="percentage_${currentIndex}">
    //         </td>
    //         <td>
    //             <select class="form-control form-control-sm" name="CostCenters[${currentIndex}].Approver" id="approver_${currentIndex}" required>
    //                 <option value="">Select Approver</option>
    //                 <option value="IT HOD">IT HOD - CY</option>
    //                 <option value="HR HOD">HR HOD</option>
    //                 <option value="Finance HOD">Finance HOD - Julie</option>
    //                 <option value="Operations HOD">Operations HOD</option>
    //                 <option value="Marketing HOD">Marketing HOD</option>
    //                 <option value="Sales HOD">Sales HOD</option>
                   
    //             </select>
    //         </td>
    //     `;
    //     tbody.appendChild(newRow);
    // }
    function removeCostCenterRow(element) {
        const row = element.closest('tr');
        const tbody = row.parentNode;
        if (tbody.children.length > 1) {
            row.remove();
            validateDistribution();
            updateApprovalPreview();
        } else {
            alert('At least one cost center is required.');
        }
    }
    function updateCurrencyDisplays(currency) {
        try {
            const displayText = currency || '---';
            // Update all currency display elements safely
            safeSetText('displayCurrency', displayText);
            safeSetText('displayCurrency2', displayText);
            safeSetText('selectedCurrency', displayText);
            // Update placeholder
            const totalAmountInput = document.getElementById('totalQuotationAmount');
            if (totalAmountInput) {
                if (currency === '---' || !currency) {
                    totalAmountInput.setAttribute('placeholder', 'Select currency first');
                } else {
                    totalAmountInput.setAttribute('placeholder', '0.00');
                }
            }
        } catch (error) {
            console.error('Error updating currency displays:', error);
        }
    }
    function updateThresholdDisplays(currency) {
        const thresholds = THRESHOLDS[currency] || THRESHOLDS.NTD;
        const cfoDisplay = document.getElementById('cfoThresholdDisplay');
        const ceoDisplay = document.getElementById('ceoThresholdDisplay');
        const formattedCFO = `${thresholds.cfo.toLocaleString('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        })} ${currency}`;
        const formattedCEO = `${thresholds.ceo.toLocaleString('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        })} ${currency}`;
        if (cfoDisplay) cfoDisplay.textContent = formattedCFO;
        if (ceoDisplay) ceoDisplay.textContent = formattedCEO;
    }
    // ============================================
    // EXCHANGE RATE FUNCTIONS
    // ============================================
    async function updateExchangeRate(currency) {
        if (!currency) {
            safeSetValue('exchangeRate', '');
            safeSetValue('contractValueSGD', '');
            safeSetAttribute('totalQuotationAmount', 'placeholder', 'Select currency first');
            updateCurrencyDisplays('---');
            const thresholdDisplay = document.getElementById('thresholdDisplay');
            if (thresholdDisplay) {
                thresholdDisplay.style.display = 'none';
            }
            return;
        }
        updateCurrencyDisplays(currency);
        const thresholdDisplay = document.getElementById('thresholdDisplay');
        if (thresholdDisplay) {
            thresholdDisplay.style.display = 'block';
        }
        updateThresholdDisplays(currency);
        // Update placeholders for item unit prices
        document.querySelectorAll('input[name*="UnitPrice"]').forEach(input => {
            input.placeholder = `0.00 ${currency}`;
        });
        if (currency === 'SGD') {
            safeSetValue('exchangeRate', '1.0000');
            calculateContractValueSGD();
            return;
        }
        try {
            const response = await fetch(`/api/exchangerate/${currency}`);
            if (!response.ok) throw new Error('Failed to fetch rate');
            const data = await response.json();
            safeSetValue('exchangeRate', data.rate.toFixed(4));
            calculateContractValueSGD();
        } catch (error) {
            console.error('Error fetching exchange rate:', error);
            alert('Failed to fetch exchange rate. Please contact administrator.');
            safeSetValue('exchangeRate', '1.0000');
        }
    }
    function calculateContractValueSGD() {
        const totalAmountInput = document.getElementById('totalQuotationAmount');
        const exchangeRateInput = document.getElementById('exchangeRate');
        const contractValueInput = document.getElementById('contractValueSGD');
        const currencySelect = document.getElementById('quotationCurrency');
        if (!totalAmountInput || !exchangeRateInput || !contractValueInput || !currencySelect) {
            console.warn('Required elements not found for SGD calculation');
            return;
        }
        const amount = parseFloat(totalAmountInput.value) || 0;
        const rate = parseFloat(exchangeRateInput.value) || 1;
        const currency = currencySelect.value;
        if (!currency) {
            contractValueInput.value = '';
            return;
        }
        const sgdValue = amount * rate;
        contractValueInput.value = 'SGD ' + sgdValue.toFixed(2);
        console.log(` SGD Conversion:`);
        console.log(`   ${currency} ${amount.toFixed(2)} (with GST) × ${rate} = SGD ${sgdValue.toFixed(2)}`);
        const conversionExample = document.getElementById('conversionExample');
        if (conversionExample) {
            if (amount > 0) {
                conversionExample.innerHTML =
                    `${currency} ${amount.toFixed(2)} (incl. GST) × ${rate} = <strong>SGD ${sgdValue.toFixed(2)}</strong>`;
            } else {
                conversionExample.textContent = 'Enter items to see conversion';
            }
        }
        validateDistribution();
        updateApprovalPreview();
    }
    // ============================================
    // APPROVAL PREVIEW WITH SGD DISPLAY
    // ============================================
    async function updateApprovalPreview() {
        console.log(' Starting approval preview update...');

        const totalAmount = parseFloat($('#totalQuotationAmount').val()) || 0;
        const currency = $('#quotationCurrency').val();
        const exchangeRate = parseFloat($('#exchangeRate').val()) || 1;
        const isITRelated = $('#IsITRelated').is(':checked');
        const hasSignedPdf = $('#SignedPDF').is(':checked');
        const noPORequired = $('#NoPORequired').is(':checked');
        const isFixedAsset = checkIfFixedAsset();

        const approvalStepsDiv = $('#approvalSteps');
        if (approvalStepsDiv.length === 0) {
            console.error(' ERROR: #approvalSteps div not found!');
            return;
        }
        approvalStepsDiv.empty();
        if (!currency) {
            approvalStepsDiv.html(`
            <div class="alert alert-warning" style="margin-top: 20px;">
            <i class="fas fa-exclamation-triangle"></i>
            <strong>Please select a Currency</strong> in Step 1 to preview the approval path.
            </div>
            `);
            return;
        }

        const sgdValue = totalAmount * exchangeRate;
        console.log(` Amount: ${currency} ${totalAmount.toFixed(2)} (incl. GST)`);
        console.log(` SGD Value: SGD ${sgdValue.toFixed(2)}`);
        console.log('️ IT Related:', isITRelated);
        console.log(' Signed PAF:', hasSignedPdf);
        console.log(' Fixed Asset:', isFixedAsset);
        // const cfoThreshold = 10000;    // SGD 10,000
        // const ceoThreshold = 1000000;  // SGD 1,000,000
        const cfoThreshold = @ViewBag.CFOThreshold;    // SGD 10,000
        const ceoThreshold = @ViewBag.CEOThreshold;  // SGD 1,000,000
        let stepNumber = 1;
        let steps = [];
        // ====================================================================
        // Step 1: Cost Center Approvers (ALL DEPARTMENT HEADS - PARALLEL)
        // ====================================================================
        const costCenterApprovers = new Set();
        document.querySelectorAll('select[name*="CostCenters"][name*=".Approver"]').forEach(select => {
            if (select.value) {
                costCenterApprovers.add(select.value);
            }
        });
        if (costCenterApprovers.size === 0) {
            approvalStepsDiv.html(`
            <div class="alert alert-warning" style="margin-top: 20px;">
            <i class="fas fa-exclamation-triangle"></i>
            <strong>Please define Cost Centers</strong> in Step 3 to preview the approval path.
            </div>
            `);
            return;
        }

        //  FIX: Show ALL cost center approvers (not just one)
        let approverIndex = 1;
        costCenterApprovers.forEach(approver => {
            steps.push({
                number: stepNumber,  //  ALL get same step number (parallel approval)
                role: 'Department Head',
                name: approver,
                description: `Cost Center Approval (${approverIndex} of ${costCenterApprovers.size})`,
                reason: 'Parallel approval from all cost center approvers required'
            });
            approverIndex++;
        });
        stepNumber++;

        // Step 2: IT HOD (if IT Related)
        if (isITRelated) {
            steps.push({
                number: stepNumber++,
                role: 'IT HOD',
                 name: 'Chaiyee',
                description: 'IT Department',
                reason: 'IT-related purchase requires IT HOD approval'
            });
        }
        // Step 3: CS HOD (ALWAYS)
        steps.push({
            number: stepNumber++,
            role: 'CS HOD',
             name: 'Scott',
            description: 'CS Department',
            reason: 'Required for all purchase requisitions'
        });
        // Determine routing
        let needsCFO = false;
        let needsCEO = false;
        let needsDeptHeadFinal = false;
        let routingReason = '';
        if (hasSignedPdf) {
        routingReason = ' Signed PAF - Workflow ends after CS HOD (CFO/CEO bypassed)';
        } else if (!isFixedAsset) {
                //  FIX: Fixed Asset UNCHECKED → CFO is FINAL (no CEO)
                needsCFO = true;
                routingReason = ' Fixed Asset is UNCHECKED - CFO approval REQUIRED (FINAL)';
                //  DO NOT check CEO threshold when Fixed Asset is unchecked
        } else {
                // Fixed Asset is CHECKED - Check thresholds
                if (sgdValue < cfoThreshold) {
                    needsDeptHeadFinal = true;
                    routingReason = ` Fixed Asset < SGD ${cfoThreshold.toLocaleString()} - Cost Center Approvers are FINAL approvers`;
                } else {
                    needsCFO = true;
                    routingReason = ` Fixed Asset ≥ SGD ${cfoThreshold.toLocaleString()} - CFO required`;
                    //  Only check CEO if Fixed Asset is CHECKED
                    if (sgdValue > ceoThreshold) {
                        needsCEO = true;
                        routingReason += `, CEO required (> SGD ${ceoThreshold.toLocaleString()})`;
                    }
                }
        }
        // Add Department Head Final (if needed)
        if (needsDeptHeadFinal) {
            //  FIX: Add ALL cost center approvers as final approvers
            approverIndex = 1;
            costCenterApprovers.forEach(approver => {
                steps.push({
                    number: stepNumber,  // Same step = parallel
                    role: 'Department Head (Final)',
                    name: approver,
                    description: `Final Approval (${approverIndex} of ${costCenterApprovers.size})`,
                    reason: `Fixed Asset < SGD ${ceoThreshold.toLocaleString()} - All Department Heads must give final approval`
                    // reason: 'Fixed Asset < SGD 10,000 - All Department Heads must give final approval'
                });
                approverIndex++;
            });
            stepNumber++;
        }
        // Add CFO if needed
        if (needsCFO) {
        const isFinalCFO = !isFixedAsset; // CFO is final when Fixed Asset is unchecked
        steps.push({
            number: stepNumber++,
            role: isFinalCFO ? 'CFO (Final Approval)' : 'CFO', //  FIX: Mark as final
            name: 'Julia',
            description: 'Finance',
            reason: isFixedAsset
                ? `Fixed Asset ≥ SGD ${cfoThreshold.toLocaleString()} requires CFO approval`
                : 'Fixed Asset unchecked - CFO approval REQUIRED (FINAL)'
        });
    }
        // Add CEO if needed
        if (needsCEO) {
            steps.push({
                number: stepNumber++,
                role: 'CEO',
                name: 'Ken',
                description: 'Executive',
                reason: `Amount > SGD ${ceoThreshold.toLocaleString()} requires CEO approval`
            });
        }
        console.log(` Generated ${steps.length} approval steps`);
        // Render routing decision
        approvalStepsDiv.append(`
        <div style="background: ${hasSignedPdf ? '#d4edda' : '#fff3cd'};
                            padding: 15px;
                            border-radius: 8px;
                            border-left: 5px solid ${hasSignedPdf ? '#28a745' : '#ffc107'};
                            margin-bottom: 20px;">
            <strong style="color: ${hasSignedPdf ? '#155724' : '#856404'};">
            <i class="fas ${hasSignedPdf ? 'fa-check-circle' : 'fa-route'}"></i>
                            ${routingReason}
            </strong>
            </div>
        `);

            // Display SGD conversion if not SGD
        if (currency !== 'SGD') {
            approvalStepsDiv.append(`
            <div style="background: #e3f2fd;
                                    padding: 15px;
                                    border-radius: 8px;
                                    border-left: 5px solid #0066cc;
                                    margin-bottom: 20px;">
            <strong style="color: #0066cc;">
            <i class="fas fa-exchange-alt"></i>
                                Converted Amount for Threshold Checks: SGD ${sgdValue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}
            </strong>
            <div style="margin-top: 8px; font-size: 12px; color: #555;">
                                ${currency} ${totalAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})} × ${exchangeRate.toFixed(4)} = SGD ${sgdValue.toFixed(2)}
            </div>
            </div>
            `);
        }
        // Render each step
        steps.forEach(step => {
            approvalStepsDiv.append(`
                <div class="approval-step active" style="margin-bottom: 15px;">
                <div style="display: flex; gap: 15px; align-items: start;
                                            background: white; padding: 20px; border-radius: 10px;
                                            border: 2px solid #e9ecef; box-shadow: 0 2px 5px rgba(0,0,0,0.08);">
                <div class="step-number" style="background: linear-gradient(135deg, #0066cc, #004499);
                                                                    color: white; width: 40px; height: 40px;
                                                                    border-radius: 50%; display: flex;
                                                                    align-items: center; justify-content: center;
                                                                    font-weight: 700; font-size: 18px; flex-shrink: 0;">
                                        ${step.number}
                </div>
                <div style="flex: 1;">
                <div class="step-role" style="font-size: 16px; font-weight: 700; color: #212529; margin-bottom: 5px;">
                                            ${step.role}
                </div>
                <div class="step-approver" style="font-size: 14px; color: #6c757d; margin-bottom: 10px;">
                                            ${step.name} - ${step.description}
                </div>
                <div style="background: #f8f9fa; padding: 12px; border-radius: 8px;
                                                    border-left: 4px solid #0066cc;">
                <div style="display: flex; gap: 8px; align-items: start;">
                <i class="fas fa-info-circle" style="color: #0066cc; margin-top: 2px;"></i>
                <div style="font-size: 13px; color: #495057;">
                <strong>Reason:</strong> ${step.reason}
                </div>
                </div>
                </div>
                </div>
                </div>
                </div>
            `);
        });

        // Render final action
        const finalAction = noPORequired ? 'Workflow Complete (No PO)' : 'Auto-generate Purchase Order';
        approvalStepsDiv.append(`
            <div style="background: ${noPORequired ? '#fff3cd' : '#d4edda'};
                        padding: 20px; border-radius: 10px; margin-top: 15px;
                        border: 2px solid ${noPORequired ? '#ffc107' : '#28a745'};">
                <div style="display: flex; gap: 15px; align-items: center;">
                    <div style="background: ${noPORequired ? '#ffc107' : '#28a745'};
                                color: white; width: 40px; height: 40px;
                                border-radius: 50%; display: flex;
                                align-items: center; justify-content: center; font-size: 20px;">
                        <i class="fas ${noPORequired ? 'fa-check' : 'fa-file-invoice'}"></i>
                    </div>
                    <div>
                        <div style="font-size: 16px; font-weight: 700; color: ${noPORequired ? '#856404' : '#155724'};">
                            ${finalAction}
                        </div>
                        <div style="font-size: 14px; color: ${noPORequired ? '#856404' : '#155724'}; margin-top: 5px;">
                            ${noPORequired ?
                                'PR workflow ends without PO creation' :
                                'System will auto-create PO after final approval'}
                        </div>
                    </div>
                </div>
            </div>
        `);

        //  UPDATED: Render summary with BOTH currency amounts and GST indication
        approvalStepsDiv.append(`
            <div style="background: #f8f9fa; padding: 20px; border-radius: 10px;
                        margin-top: 20px; border: 2px solid #dee2e6;">
                <div style="font-size: 18px; font-weight: 700; margin-bottom: 15px;
                            border-bottom: 2px solid #0066cc; padding-bottom: 10px;">
                    <i class="fas fa-clipboard-check" style="color: #0066cc;"></i> Approval Summary
                </div>
                <ul style="margin: 0; padding-left: 20px; line-height: 2;">
                    <li><strong>Total Steps:</strong> ${steps.length}</li>
                    <li><strong>Amount:</strong> ${currency} ${totalAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})} <span style="color: #28a745; font-weight: 600;">(incl. GST)</span></li>
                    ${currency !== 'SGD' ? `<li><strong>Converted Amount (SGD):</strong> SGD ${sgdValue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})} <span style="font-size: 12px; color: #666;">(for threshold checks)</span></li>` : ''}
                    <li><strong>IT Related:</strong> ${isITRelated ? ' Yes' : '✗ No'}</li>
                    <li><strong>Signed PAF:</strong> ${hasSignedPdf ? ' Yes' : '✗ No'}</li>
                    <li><strong>Fixed Asset:</strong> ${isFixedAsset ? ' Yes' : '✗ No'}</li>
                    <li><strong>No PO Required:</strong> ${noPORequired ? 'Yes' : 'No'}</li>
                    <li><strong>CFO Approval:</strong> ${needsCFO ? ' Required' : '✗ Not Required'}</li>
                    <li><strong>CEO Approval:</strong> ${needsCEO ? ' Required' : '✗ Not Required'}</li>
                </ul>
            </div>
        `);

        console.log(' Approval preview rendered successfully');
    }
    function checkIfFixedAsset() {
        let hasFixedAsset = false;
        document.querySelectorAll('input[name*="IsFixedAsset"]').forEach(checkbox => {
            if (checkbox.checked) {
                hasFixedAsset = true;
                console.log(` Fixed Asset checkbox checked: ${checkbox.name}`);
            }
        });
        console.log(` checkIfFixedAsset() result: ${hasFixedAsset}`);
        return hasFixedAsset;
    }
    // ============================================
    // FILE HANDLING FUNCTIONS
    // ============================================
    function handleFileSelect(input) {
        const files = input.files;
        const previewList = document.getElementById('filePreviewList');
        for (let file of files) {
            if (!validateFile(file)) continue;
            addFilePreview(file, previewList);
        }
    }
    function validateFile(file) {
        const allowedTypes = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.png'];
        const maxSize = 5 * 1024 * 1024;
        const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
        if (!allowedTypes.includes(fileExtension)) {
            alert('Invalid file type. Please select: ' + allowedTypes.join(', '));
            return false;
        }
        if (file.size > maxSize) {
            alert('File size too large. Maximum size is 5MB.');
            return false;
        }
        return true;
    }
    function addFilePreview(file, container) {
        const fileSize = file.size < 1024 * 1024
            ? (file.size / 1024).toFixed(2) + ' KB'
            : (file.size / (1024 * 1024)).toFixed(2) + ' MB';
        const previewItem = document.createElement('div');
        previewItem.className = 'file-preview-item';
        previewItem.innerHTML = `
            <div class="file-info">
                <i class="fas fa-file" style="color: #0066cc; font-size: 20px;"></i>
                <div>
                    <div style="font-weight: 600; color: #333;">${file.name}</div>
                    <small style="color: #666;">${fileSize}</small>
                </div>
            </div>
            <button type="button" class="file-remove-btn" onclick="removeFile(this)">
                <i class="fas fa-times"></i>
            </button>
        `;
        container.appendChild(previewItem);
    }
    function removeFile(button) {
        const item = button.closest('.file-preview-item');
        item.remove();
    }
    function toggleSignedPdfUpload() {
        const checkbox = document.getElementById('SignedPDF');
        const section = document.getElementById('signedPdfSection');
        const input = document.getElementById('signedPdfInput');
        if (checkbox.checked) {
            section.style.display = 'block';
            input.required = true;
            // Initialize drag-and-drop for signed PAF
            initializeSignedPdfUpload();
        } else {
            section.style.display = 'none';
            input.required = false;
            signedPdfUploaded = false;
            document.getElementById('signedPdfPreview').innerHTML = '';
        }
        updateApprovalPreview();
    }

    function initializeSignedPdfUpload() {
        const uploadArea = document.getElementById('signedPdfUploadArea');
        const fileInput = document.getElementById('signedPdfInput');
        if (!uploadArea || !fileInput) {
            console.warn('Signed PDF upload elements not found');
            return;
        }
        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });
   function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        // Highlight drop area
        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => uploadArea.classList.add('drag-over'), false);
        });
        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => uploadArea.classList.remove('drag-over'), false);
        });
        // Handle dropped files
        uploadArea.addEventListener('drop', handleSignedPdfDrop, false);
        // Click to upload
        uploadArea.addEventListener('click', () => fileInput.click());
    }

        function handleSignedPdfDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;
        if (files.length > 0) {
            const fileInput = document.getElementById('signedPdfInput');
            fileInput.files = files;
            handleSignedPdfUpload(fileInput);
        }
    }
    function handleSignedPdfUpload(input) {
        const file = input.files[0];
        if (!file) return;
        // Validate file type
        if (file.type !== 'application/pdf') {
            alert(' Only PDF files are allowed for signed documents.');
            input.value = '';
            return;
        }
        // Validate file size (5MB max)
        if (file.size > 5 * 1024 * 1024) {
            alert(' File size must be less than 5MB.');
            input.value = '';
            return;
        }
        signedPdfUploaded = true;
        const fileSize = file.size < 1024 * 1024
            ? (file.size / 1024).toFixed(2) + ' KB'
            : (file.size / (1024 * 1024)).toFixed(2) + ' MB';
        const preview = document.getElementById('signedPdfPreview');
        preview.innerHTML = `
    <div class="file-preview-item" style="margin-top: 15px;">
    <div class="file-info">
    <i class="fas fa-file-pdf" style="color: #dc3545; font-size: 24px;"></i>
    <div>
    <div style="font-weight: 600; color: #333;">${file.name}</div>
    <small style="color: #666;">${fileSize}</small>
    </div>
    </div>
    <button type="button" class="file-remove-btn" onclick="removeSignedPdf()">
    <i class="fas fa-times"></i> Remove
    </button>
    </div>
        `;
        updateApprovalPreview();
    }
        function removeSignedPdf() {
        document.getElementById('signedPdfInput').value = '';
        document.getElementById('signedPdfPreview').innerHTML = '';
        signedPdfUploaded = false;
        updateApprovalPreview();
    }
    function clearForm() {
        if (confirm('Are you sure you want to clear all form data?')) {
            document.querySelector('form').reset();
            validateDistribution();
            calculateTotal();
            updateApprovalPreview();
        }
    }
    // Currency change event
    document.getElementById('quotationCurrency').addEventListener('change', function() {
        const currency = this.value || 'USD';
        document.getElementById('selectedCurrency').textContent = currency;
        document.querySelectorAll('input[name*="UnitPrice"]').forEach(input => {
            input.placeholder = `0.00 ${currency}`;
        });
    });


    //company details
    document.getElementById('companySelect').addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        const address = selectedOption.getAttribute('data-address');
        const deliveryAddressField = document.querySelector('textarea[name="DeliveryAddress"]');
        if (address && deliveryAddressField) {
            deliveryAddressField.value = address;
        } else {
            deliveryAddressField.value = '';
        }
    });


    // ============================================
    // FORM VALIDATION
    // ============================================
    document.querySelector('form').addEventListener('submit', function (e) {
        // ========================================
        // 1. SIGNED PAF VALIDATION
        // ========================================
        const signedPdfCheck = document.getElementById('SignedPDF');
        const signedPdfInput = document.getElementById('signedPdfInput');
        if (signedPdfCheck?.checked) {
            const hasUploadedFile = signedPdfInput?.files?.length > 0;
            if (!hasUploadedFile) {
                e.preventDefault();
                alert(' Please upload the signed PDF document before submitting.');
                document.getElementById('signedPdfSection')?.scrollIntoView({ behavior: 'smooth' });
                return false;
            }
        }
        // ========================================
        // 2. ATTACHMENT LIST VALIDATION (MANDATORY)
        // ========================================
        const filePreviewList = document.getElementById('filePreviewList');
        const hasAttachments = filePreviewList && filePreviewList.children.length > 0;
        if (!hasAttachments) {
            e.preventDefault();
            alert(' At least one attachment is required. Please upload a file before submitting.');
            document.getElementById('uploadArea')?.scrollIntoView({ behavior: 'smooth' });
            return false;
        }
        // ========================================
        // 3. GST VALIDATION
        // ========================================
        const rows = document.querySelectorAll('#purchaseItemsTable tbody tr');
        let hasValidItem = false;
        let hasInvalidGST = false;
        let hasInvalidItem = false;
        rows.forEach((row, index) => {
            const description = row.querySelector('input[name*="Description"]')?.value?.trim();
            const quantity = row.querySelector('input[name*="Quantity"]')?.value;
            const unitPrice = row.querySelector('input[name*="UnitPrice"]')?.value;
            const amount = row.querySelector('input[name*="Amount"]')?.value;
            const gstInput = row.querySelector('select[name*="GST"]'); // Changed to select
            const supplier = row.querySelector('select[name*="SuggestedSupplier"]')?.value;
            const paymentTerms = row.querySelector('input[name*="PaymentTerms"]')?.value?.trim();
            // Validate GST range
            if (gstInput && gstInput.value) {
                const gstValue = parseFloat(gstInput.value);
                if (gstValue < 0 || gstValue > 10) {
                    hasInvalidGST = true;
                    gstInput.style.border = '3px solid #dc3545';
                } else {
                    gstInput.style.border = '';
                }
            }
            // Check if item is valid
            if (description && quantity && parseFloat(quantity) > 0 &&
                unitPrice && parseFloat(unitPrice) > 0 &&
                amount !== '' && !isNaN(parseFloat(amount))) {
                hasValidItem = true;
                // Validate supplier and payment terms
                if (!supplier) {
                    hasInvalidItem = true;
                    alert(` Item ${index + 1}: Please select a supplier`);
                    e.preventDefault();
                    return false;
                }
                if (!paymentTerms) {
                    hasInvalidItem = true;
                    alert(` Item ${index + 1}: Please enter payment terms`);
                    e.preventDefault();
                    return false;
                }
            }
        });
        if (hasInvalidGST) {
            e.preventDefault();
            alert(' Invalid GST percentage detected. GST must be between 0% and 10%');
            return false;
        }
        if (!hasValidItem) {
            e.preventDefault();
            alert(' Please add at least one valid purchase item with description, quantity, and unit price');
            return false;
        }
        // ========================================
        // 4. TOTAL AMOUNT VALIDATION
        // ========================================
        const totalAmount = parseFloat(document.getElementById('totalQuotationAmount')?.value) || 0;
        if (totalAmount === 0) {
            e.preventDefault();
            alert(' Total amount cannot be $0. Please check your items.');
            return false;
        }
        // ========================================
        // 5. COST CENTER VALIDATION
        // ========================================
        let costCenterTotal = 0;
        document.querySelectorAll('.cost-center-amount').forEach(input => {
            costCenterTotal += parseFloat(input.value) || 0;
        });
        if (Math.abs(costCenterTotal - totalAmount) > 0.01) {
            e.preventDefault();
            alert(` Cost center amounts ($${costCenterTotal.toFixed(2)}) must equal quotation total ($${totalAmount.toFixed(2)})`);
            return false;
        }
        if (costCenterTotal === 0) {
            e.preventDefault();
            alert(' Please add at least one cost center with a valid amount');
            return false;
        }
    });
    // ============================================
    // PAGE INITIALIZATION
    // ============================================
    document.addEventListener('DOMContentLoaded', function() {
        console.log(' DOM fully loaded - Initializing form...');
        // Initialize currency dropdown handler
        const currencySelect = document.getElementById('quotationCurrency');
        if (currencySelect) {
            currencySelect.addEventListener('change', function() {
                const currency = this.value || 'USD';
                updateExchangeRate(currency);
                // Update any other currency-dependent displays
                const selectedCurrencyDisplay = document.getElementById('selectedCurrency');
                if (selectedCurrencyDisplay) {
                    selectedCurrencyDisplay.textContent = currency;
                }
                // Update unit price placeholders
                document.querySelectorAll('input[name*="UnitPrice"]').forEach(input => {
                    input.placeholder = `0.00 ${currency}`;
                });
            });
        } else {
            console.error(' Currency select not found!');
        }
        // Initialize company dropdown handler
        const companySelect = document.getElementById('companySelect');
        const deliveryAddressField = document.querySelector('textarea[name="DeliveryAddress"]');
        if (companySelect && deliveryAddressField) {
            companySelect.addEventListener('change', async function() {
                const selectedOption = this.options[this.selectedIndex];
                if (selectedOption.value) {
                    try {
                        // Fetch company details from server
                        const response = await fetch(`/api/company/${encodeURIComponent(selectedOption.value)}`);
                        if (response.ok) {
                            const data = await response.json();
                            if (data.success && data.fullAddress) {
                                // Pre-fill the delivery address
                                deliveryAddressField.value = data.fullAddress;
                                console.log(' Delivery address pre-filled:', data.fullAddress);
                            }
                        }
                    } catch (error) {
                        console.error(' Error fetching company address:', error);
                    }
                } else {
                    // Clear delivery address if no company selected
                    deliveryAddressField.value = '';
                }
            });
        }
        const phoneInput = document.querySelector('input[name="ContactPhoneNo"]');
        if (phoneInput) {
         phoneInput.addEventListener('input', function(e) {
             // Remove any alphabetic characters
             let value = e.target.value;
             let cleaned = value.replace(/[a-zA-Z]/g, '');
             if (value !== cleaned) {
                 e.target.value = cleaned;
                 showPhoneValidationMessage('Alphabetic characters are not allowed in phone number');
             }
         });
         phoneInput.addEventListener('keypress', function(e) {
             const char = String.fromCharCode(e.which);
             // Allow: numbers, +, -, (, ), space, backspace, delete
             if (!/[\d\+\-\(\)\s]/.test(char) && e.which !== 8 && e.which !== 46) {
                 e.preventDefault();
                 showPhoneValidationMessage('Only numbers and symbols (+, -, (, )) are allowed');
             }
         });
         phoneInput.addEventListener('blur', function(e) {
             validatePhoneNumber(e.target);
         });
     }
        // Initialize file upload drag and drop
        initializeFileUpload();
        console.log(' Form initialization complete');
    });

    function validatePhoneNumber(input) {
        const value = input.value.trim();
        const validationSpan = input.nextElementSibling;
        // Regular expression: only digits, spaces, +, -, (, )
        const phoneRegex = /^[\d\s\+\-\(\)]+$/;
        if (value && !phoneRegex.test(value)) {
            if (validationSpan && validationSpan.classList.contains('text-danger')) {
                validationSpan.textContent = 'Phone number can only contain numbers and symbols (+, -, (, ), spaces)';
            } else {
                const span = document.createElement('span');
                span.className = 'text-danger phone-validation';
                span.textContent = 'Phone number can only contain numbers and symbols (+, -, (, ), spaces)';
                input.parentNode.insertBefore(span, input.nextSibling);
            }
            input.style.borderColor = '#dc3545';
            return false;
        } else {
            // Remove validation message if exists
            const existingMsg = input.parentNode.querySelector('.phone-validation');
            if (existingMsg) {
                existingMsg.remove();
            }
            input.style.borderColor = '';
            return true;
        }
    }
    function showPhoneValidationMessage(message) {
        const phoneInput = document.querySelector('input[name="ContactPhoneNo"]');
         if (phoneInput && phoneInput.value.trim()) {
         const phoneRegex = /^[\d\s\+\-\(\)]+$/;
             if (!phoneRegex.test(phoneInput.value.trim())) {
                 e.preventDefault();
                 alert(' Invalid phone number format. Only numbers and symbols (+, -, (, )) are allowed.');
                 phoneInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                 phoneInput.focus();
                 return false;
             }
        }
        // Show temporary message
        const msgDiv = document.createElement('div');
        msgDiv.className = 'phone-validation-temp';
        msgDiv.style.cssText = 'color: #dc3545; font-size: 12px; margin-top: 5px;';
        msgDiv.textContent = message;
        phoneInput.parentNode.insertBefore(msgDiv, phoneInput.nextSibling);
        // Remove after 3 seconds
        setTimeout(() => {
            if (msgDiv.parentNode) {
                msgDiv.remove();
            }
        }, 3000);
    }
    // ============================================
    // FILE UPLOAD INITIALIZATION
    // ============================================
    function initializeFileUpload() {
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        if (!uploadArea || !fileInput) {
            console.warn('Upload elements not found');
            return;
        }
        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        // Highlight drop area
        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => uploadArea.classList.add('drag-over'), false);
        });
        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => uploadArea.classList.remove('drag-over'), false);
        });
        // Handle dropped files
        uploadArea.addEventListener('drop', handleDrop, false);
        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFileSelectFromDrop(files);
        }
        // Click to upload
        uploadArea.addEventListener('click', () => fileInput.click());
    }
    function handleFileSelectFromDrop(files) {
        const previewList = document.getElementById('filePreviewList');
        for (let file of files) {
            if (!validateFile(file)) continue;
            addFilePreview(file, previewList);
        }
    }
</script>