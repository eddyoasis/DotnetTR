@model TradingLimitMVC.Models.TradingLimitRequest
@{
    ViewData["Title"] = "Trading Limit Request Details";
}

@functions {
    string FormatTimeSpan(TimeSpan timeSpan)
    {
        var totalHours = (int)timeSpan.TotalHours;
        var days = totalHours / 24;
        var hours = totalHours % 24;
        var minutes = timeSpan.Minutes;

        if (days > 0)
        {
            if (hours > 0)
                return $"{days}d {hours}h";
            else
                return $"{days}d";
        }
        else if (hours > 0)
        {
            if (minutes > 0)
                return $"{hours}h {minutes}m";
            else
                return $"{hours}h";
        }
        else
        {
            return $"{minutes}m";
        }
    }

    string GetFileIcon(string contentType)
    {
        return contentType?.ToLower() switch
        {
            var ct when ct.Contains("pdf") => "fa-file-pdf text-danger",
            var ct when ct.Contains("word") || ct.Contains("document") => "fa-file-word text-primary",
            var ct when ct.Contains("excel") || ct.Contains("spreadsheet") => "fa-file-excel text-success",
            var ct when ct.Contains("image") => "fa-file-image text-info",
            var ct when ct.Contains("text") => "fa-file-alt text-secondary",
            _ => "fa-file text-secondary"
        };
    }

    string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }
}

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
    }

    .page-wrapper {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        padding: 20px 0;
    }

    .main-container {
        background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
        border: none;
        margin: 20px auto;
        padding: 0;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        max-width: 1000px;
    }

    .header-section {
        background: linear-gradient(135deg, #0066cc, #004499);
        border-bottom: none;
        padding: 20px 25px;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-title {
        font-size: 24px;
        font-weight: 700;
        margin: 0;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
        text-transform: uppercase;
    }

    .status-draft {
        background-color: #6c757d;
        color: white;
    }

    .status-submitted {
        background-color: #007bff;
        color: white;
    }

    .status-approved {
        background-color: #28a745;
        color: white;
    }

    .status-rejected {
        background-color: #dc3545;
        color: white;
    }

    .content-section {
        padding: 25px;
    }

    .info-section {
        margin-bottom: 30px;
        background: #ffffff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .section-title {
        font-size: 16px;
        font-weight: 600;
        color: #495057;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #e9ecef;
    }

    .info-row {
        display: flex;
        margin-bottom: 15px;
    }

    .info-label {
        flex: 0 0 200px;
        font-weight: 600;
        color: #495057;
        font-size: 14px;
    }

    .info-value {
        flex: 1;
        color: #212529;
        font-size: 14px;
    }

    .info-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .btn-group {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e9ecef;
    }

    .btn {
        padding: 12px 20px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        cursor: pointer;
        font-size: 14px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #0066cc, #004499);
        color: white;
    }

    .btn-success {
        background: linear-gradient(135deg, #28a745, #20a545);
        color: white;
    }

    .btn-warning {
        background: linear-gradient(135deg, #ffc107, #e0a800);
        color: #212529;
    }

    .btn-danger {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .attachments-list {
        list-style: none;
        padding: 0;
    }

    .attachment-item {
        display: flex;
        align-items: center;
        padding: 10px;
        margin-bottom: 10px;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #0066cc;
    }

    .attachment-icon {
        margin-right: 10px;
        color: #0066cc;
        font-size: 18px;
    }

    .attachment-name {
        flex: 1;
        font-weight: 500;
    }

    .attachment-size {
        color: #6c757d;
        font-size: 12px;
    }

    .attachment-actions {
        display: flex;
        gap: 5px;
    }

    .attachment-actions .btn {
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .attachment-actions .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    #uploadProgress {
        border-radius: 8px;
        background: #f8f9fa;
        padding: 15px;
        border: 1px solid #e9ecef;
    }

    #uploadProgress .progress {
        height: 8px;
        border-radius: 4px;
        background-color: #e9ecef;
    }

    #uploadProgress .progress-bar {
        background: linear-gradient(45deg, #007bff, #0056b3);
        border-radius: 4px;
        transition: width 0.3s ease;
    }

    .upload-status {
        font-size: 14px;
        color: #6c757d;
    }

    .toast-container {
        z-index: 9999;
    }

    /* Timeline Styles */
    .timeline {
        position: relative;
        padding-left: 35px;
        margin-top: 20px;
    }

    .timeline::before {
        content: '';
        position: absolute;
        left: 17px;
        top: 0;
        bottom: 0;
        width: 2px;
        background: linear-gradient(to bottom, #007bff, #e9ecef);
    }

    .timeline-item {
        position: relative;
        margin-bottom: 35px;
        padding: 10px 0;
    }

    .timeline-item:last-child {
        margin-bottom: 0;
    }

    .timeline-item.timeline-pending {
        animation: pulse 2s infinite;
    }

    .timeline-item.timeline-pending .timeline-content {
        animation: glow 2s infinite alternate;
    }

    .timeline-marker {
        position: absolute;
        left: -26px;
        top: 0;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        border: 3px solid #fff;
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2;
    }

    .timeline-marker.bg-primary {
        animation: pulse-ring 2s infinite;
    }

    .timeline-content {
        padding-left: 20px;
        background: #fff;
        border-radius: 8px;
        padding: 15px 20px;
        box-shadow: 0 1px 4px rgba(0,0,0,0.05);
        border: 1px solid #f0f0f0;
        min-height: 60px;
    }

    .timeline-pending .timeline-content {
        border-left: 4px solid #007bff;
        background: linear-gradient(135deg, #e3f2fd, #fff);
        position: relative;
    }

    .timeline-pending .timeline-content::before {
        content: '';
        position: absolute;
        top: -2px;
        left: -6px;
        right: -2px;
        bottom: -2px;
        background: linear-gradient(45deg, #007bff, #0056b3);
        border-radius: 10px;
        z-index: -1;
        animation: border-pulse 2s infinite;
    }

    .timeline-title {
        font-size: 0.9rem;
        font-weight: 600;
        margin-bottom: 8px;
        color: #333;
    }

    .timeline-text {
        font-size: 0.85rem;
        line-height: 1.5;
        margin-bottom: 8px;
    }

    .timeline-dates {
        background: #f8f9fa;
        border-radius: 6px;
        padding: 8px 12px;
        border-left: 3px solid #e9ecef;
    }

    .timeline-dates small {
        font-size: 0.75rem;
    }

    .timeline-status-badge {
        font-size: 0.75rem;
        padding: 4px 8px;
    }

    .timeline-status-approved {
        background-color: rgba(40, 167, 69, 0.1) !important;
        color: #28a745 !important;
    }

    .timeline-status-rejected {
        background-color: rgba(220, 53, 69, 0.1) !important;
        color: #dc3545 !important;
    }

    .timeline-status-revision-required {
        background-color: rgba(255, 193, 7, 0.1) !important;
        color: #ffc107 !important;
    }

    .timeline-status-in-progress, .timeline-status-inprogress {
        background-color: rgba(0, 123, 255, 0.1) !important;
        color: #007bff !important;
    }

    .timeline-status-pending, .timeline-status-submitted {
        background-color: rgba(108, 117, 125, 0.1) !important;
        color: #6c757d !important;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.02);
        }
        100% {
            transform: scale(1);
        }
    }

    @@keyframes glow {
        0% {
            box-shadow: 0 1px 4px rgba(0,0,0,0.05), 0 0 0 0 rgba(0, 123, 255, 0.3);
        }
        100% {
            box-shadow: 0 1px 4px rgba(0,0,0,0.05), 0 0 15px rgba(0, 123, 255, 0.6);
        }
    }

    @@keyframes border-pulse {
        0% {
            opacity: 0.5;
            transform: scale(1);
        }
        50% {
            opacity: 1;
            transform: scale(1.005);
        }
        100% {
            opacity: 0.5;
            transform: scale(1);
        }
    }

    @@keyframes pulse-ring {
        0% {
            transform: scale(1);
            box-shadow: 0 2px 8px rgba(0,0,0,0.15), 0 0 0 0 rgba(0, 123, 255, 0.7);
        }
        70% {
            transform: scale(1);
            box-shadow: 0 2px 8px rgba(0,0,0,0.15), 0 0 0 10px rgba(0, 123, 255, 0);
        }
        100% {
            transform: scale(1);
            box-shadow: 0 2px 8px rgba(0,0,0,0.15), 0 0 0 0 rgba(0, 123, 255, 0);
        }
    }

    /* Multi-Approval Styles */
    .approver-step {
        background: #fafbfc;
        transition: all 0.2s;
    }

    .approver-step:hover {
        background: #f5f7fa;
        border-color: #007bff !important;
    }

    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .btn-lg {
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        font-weight: 500;
    }

    .badge {
        font-size: 0.75rem;
    }

    /* Group Badge Styles */
    .group-badge-iwm {
        background: linear-gradient(135deg, #17a2b8, #138496) !important;
        color: white !important;
    }

    .group-badge-gsps {
        background: linear-gradient(135deg, #ffc107, #e0a800) !important;
        color: #212529 !important;
    }

    .group-badge-risk {
        background: linear-gradient(135deg, #dc3545, #c82333) !important;
        color: white !important;
    }

    /* Timeline Group Badge Enhancements */
    .timeline-group-badge {
        font-size: 0.65rem;
        padding: 2px 6px;
        border-radius: 3px;
    }

    /* Approvers Vertical List */
    .approvers-vertical-list {
        display: flex;
        flex-direction: column;
        gap: 0;
    }

    .approvers-vertical-list > div {
        width: 100%;
        display: block;
    }
</style>

<div class="page-wrapper">
    <div class="main-container">
        <div class="header-section">
            <h1 class="header-title">Trading Limit Request Details</h1>
            <span class="status-badge status-@Model.Status.ToLower()">
                @Model.Status
            </span>
        </div>

        <div class="content-section">
            @if (TempData["SuccessMessage"] != null)
            {
                @if (TempData["SuccessMessage"].ToString().Contains("REJECTED REQUEST UPDATED") || ViewBag.IsResubmitReady == true)
                {
                            <div class="alert alert-success alert-dismissible fade show border-0 shadow-sm" role="alert" style="background: linear-gradient(135deg, #28a745, #20c997);">
                                <div class="d-flex align-items-center">
                                    <div class="flex-grow-1">
                                        <h5 class="alert-heading text-white mb-2">
                                            <i class="fas fa-check-circle me-2"></i>
                                            Request Successfully Updated!
                                        </h5>
                                        <p class="text-white mb-2">@TempData["SuccessMessage"]</p>
                                        <div class="d-flex gap-2">
                                    @*  <button type="button" class="btn btn-light btn-sm" onclick="scrollToSubmissionSection()">
                                        <i class="fas fa-rocket me-1"></i> Resubmit Now
                                    </button> *@
                                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-light btn-sm">
                                                <i class="fas fa-edit me-1"></i> Continue Editing
                                            </a>
                                        </div>
                                    </div>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert"></button>
                                </div>
                            </div>
                }
                else
                {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @TempData["SuccessMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                }
            }

            @if (TempData["ErrorMessage"] != null)
            {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @TempData["ErrorMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
            }

            <!-- Status-based Alert for Rejected Requests -->
            @if (Model.Status == "Rejected")
            {
                    <div class="alert alert-danger alert-dismissible fade show border-0 shadow-sm" role="alert" style="background: linear-gradient(135deg, #dc3545, #c82333);">
                        <div class="d-flex align-items-center">
                            <div class="flex-grow-1">
                                <h5 class="alert-heading text-white mb-2">
                                    <i class="fas fa-times-circle me-2"></i>
                                    Request Rejected
                                </h5>
                                <p class="text-white mb-0">Trading limit request @Model.RequestId has been rejected.</p>
                            </div>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert"></button>
                        </div>
                    </div>
            }

            <!-- Basic Information -->
            <div class="info-section">
                <h3 class="section-title">Request Information</h3>
                <div class="info-grid">
                    <div>
                        <div class="info-row">
                            <div class="info-label">Request ID:</div>
                            <div class="info-value">@Html.DisplayFor(model => model.RequestId)</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Request Date:</div>
                            <div class="info-value">@Model.RequestDate.ToString("MMM dd, yyyy")</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">TR Code:</div>
                            <div class="info-value">@Html.DisplayFor(model => model.TRCode)</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Client Code:</div>
                            <div class="info-value">@Html.DisplayFor(model => model.ClientCode)</div>
                        </div>
                    </div>
                    <div>
                        <div class="info-row">
                            <div class="info-label">Limit End Date:</div>
                            <div class="info-value">@Model.LimitEndDate.ToString("MMM dd, yyyy")</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Request Type:</div>
                            <div class="info-value">@Html.DisplayFor(model => model.RequestType)</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Reason Type:</div>
                            <div class="info-value">@Html.DisplayFor(model => model.ReasonType)</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Created By:</div>
                            <div class="info-value">@Html.DisplayFor(model => model.CreatedBy)</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Created Date:</div>
                            <div class="info-value">@Model.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                        </div>
                    </div>
                </div>
                
                <div class="info-row">
                    <div class="info-label">Brief Description:</div>
                    <div class="info-value">@Html.DisplayFor(model => model.BriefDescription)</div>
                </div>
            </div>

            <!-- Limit Information -->
            <div class="info-section">
                <h3 class="section-title">Limit Information</h3>
                <div class="info-grid">
                    @* Temporarily hidden fields - can be re-enabled by uncommenting *@
                    @* <div>
                        <div class="info-row">
                            <div class="info-label">GL Current Limit:</div>
                            <div class="info-value">@Model.GLCurrentLimit.ToString("C")</div>
                        </div> *@
                        <div class="info-row">
                            <div class="info-label">GL Proposed Limit:</div>
                            <div class="info-value">@Model.GLProposedLimit.ToString("C")</div>
                        </div>
                    @* </div>
                    <div>
                        <div class="info-row">
                            <div class="info-label">Current Current Limit:</div>
                            <div class="info-value">@Model.CurrentCurrentLimit.ToString("C")</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Current Proposed Limit:</div>
                            <div class="info-value">@Model.CurrentProposedLimit.ToString("C")</div>
                        </div>
                    </div> *@
                </div>
            </div>

            <!-- Supporting Documents -->
            <div class="info-section">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="section-title mb-0">Supporting Documents</h3>
                    @if (Model.Status == "Draft")
                    {
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="document.getElementById('additionalAttachments').click()">
                            <i class="fas fa-plus me-1"></i> Add Files
                        </button>
                        <input type="file" id="additionalAttachments" name="additionalAttachments" multiple accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.gif" style="display: none;" onchange="uploadAdditionalFiles(@Model.Id)" />
                    }
                </div>
                
                @if (Model.Attachments.Any())
                {
                    <ul class="attachments-list" id="attachmentsList">
                        @foreach (var attachment in Model.Attachments)
                        {
                            <li class="attachment-item" data-attachment-id="@attachment.Id">
                                <div class="d-flex align-items-center justify-content-between">
                                    <div class="d-flex align-items-center">
                                        <i class="fas @GetFileIcon(attachment.ContentType) attachment-icon me-2"></i>
                                        <div>
                                            <div class="attachment-name">@attachment.FileName</div>
                                            <small class="attachment-size text-muted">
                                                @FormatFileSize(attachment.FileSize)
                                                @if (attachment.UploadDate != default)
                                                {
                                                    <span> • Uploaded @attachment.UploadDate.ToString("MMM dd, yyyy")</span>
                                                }
                                                @if (!string.IsNullOrEmpty(attachment.UploadedBy))
                                                {
                                                    <span> by @attachment.UploadedBy</span>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                    <div class="attachment-actions">
                                        <a href="@Url.Action("DownloadAttachment", new { attachmentId = attachment.Id })" 
                                           class="btn btn-sm btn-outline-primary me-1" title="Download">
                                            <i class="fas fa-download"></i>
                                        </a>
                                        @if (Model.Status == "Draft")
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                                    onclick="deleteAttachment(@attachment.Id, '@attachment.FileName')" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted" id="noAttachmentsMessage">No supporting documents attached.</p>
                }
                
                @if (Model.Status == "Draft")
                {
                    <div id="uploadProgress" class="mt-3" style="display: none;">
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                        </div>
                        <div class="upload-status mt-2"></div>
                    </div>
                }
            </div>

            <!-- Audit Information -->
            @if (Model.SubmittedDate.HasValue || Model.ModifiedDate.HasValue)
            {
                <div class="info-section">
                    <h3 class="section-title">Audit Information</h3>
                    @if (Model.SubmittedDate.HasValue)
                    {
                        <div class="info-row">
                            <div class="info-label">Submitted Date:</div>
                            <div class="info-value">@Model.SubmittedDate.Value.ToString("MMM dd, yyyy HH:mm")</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Submitted By:</div>
                            <div class="info-value">@Html.DisplayFor(model => model.SubmittedBy)</div>
                        </div>
                    }
                    
                    @if (Model.ModifiedDate.HasValue)
                    {
                        <div class="info-row">
                            <div class="info-label">Last Modified:</div>
                            <div class="info-value">@Model.ModifiedDate.Value.ToString("MMM dd, yyyy HH:mm")</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Modified By:</div>
                            <div class="info-value">@Html.DisplayFor(model => model.ModifiedBy)</div>
                        </div>
                    }
                </div>
            }

            <!-- Approval Timeline Section -->
            @if (Model.Status != "Draft")
            {
                <div class="info-section">
                    <h3 class="section-title">
                        <i class="fas fa-route me-2"></i>
                        Approval Timeline & Workflow Steps
                    </h3>
                    <div class="timeline">
                        <!-- Request Submitted -->
                        <div class="timeline-item">
                            <div class="timeline-marker bg-primary"></div>
                            <div class="timeline-content">
                                <h6 class="timeline-title">Request Submitted</h6>
                                <p class="timeline-text text-muted mb-1">
                                    By @Model.SubmittedBy
                                </p>
                                <small class="text-muted">
                                    @Model.SubmittedDate?.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                </small>
                            </div>
                        </div>

                        @if (Model.ApprovalWorkflow != null && Model.ApprovalWorkflow.ApprovalSteps.Any())
                        {
                            <!-- Multi-step Approval Workflow -->
                            @foreach (var step in Model.ApprovalWorkflow.ApprovalSteps.OrderBy(s => s.StepNumber))
                            {
                                var stepStatus = step.Status;
                                var markerClass = stepStatus switch {
                                    "Approved" => "bg-success",
                                    "Rejected" => "bg-danger",
                                    "Revision Required" => "bg-warning",
                                    "InProgress" => "bg-primary",
                                    "Pending" => "bg-secondary",
                                    _ => "bg-light"
                                };
                                var statusIcon = stepStatus switch {
                                    "Approved" => "fa-check",
                                    "Rejected" => "fa-times",
                                    "Revision Required" => "fa-edit",
                                    "InProgress" => "fa-spinner",
                                    "Pending" => "fa-clock",
                                    _ => "fa-question"
                                };

                                <div class="timeline-item @(stepStatus == "InProgress" ? "timeline-pending" : "")">
                                    <div class="timeline-marker @markerClass">
                                        <i class="fas @statusIcon @(stepStatus == "InProgress" ? "fa-spin" : "") text-white" style="font-size: 0.7rem;"></i>
                                    </div>
                                    <div class="timeline-content">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <h6 class="timeline-title">
                                                    @* Step @step.StepNumber: @step.ApproverName *@
                                                    @step.ApproverName
                                                    @if (!string.IsNullOrEmpty(step.ApproverRole))
                                                    {
                                                        <small class="text-muted">(@step.ApproverRole)</small>
                                                    }
                                                    @if (!string.IsNullOrEmpty(step.ApprovalGroupName))
                                                    {
                                                        var timelineGroupBadgeClass = step.ApprovalGroupId switch {
                                                            1 => "bg-info",        // IWM
                                                            2 => "bg-warning",     // GSPS
                                                            3 => "bg-danger",      // Risk
                                                            _ => "bg-secondary"
                                                        };
                                                        <span class="badge @timelineGroupBadgeClass ms-2" style="font-size: 0.7rem;">@step.ApprovalGroupName</span>
                                                    }
                                                </h6>
                                                <p class="timeline-text text-muted mb-1">
                                                    @step.ApproverEmail
                                                    @* @if (step.ApprovalGroupId.HasValue)
                                                    {
                                                        <small class="text-muted ms-2">
                                                            <i class="fas fa-users me-1"></i>Group ID: @step.ApprovalGroupId
                                                        </small>
                                                    } *@
                                                </p>
                                            </div>
                                            <span class="badge timeline-status-badge timeline-status-@stepStatus.ToLower().Replace(" ", "-")">
                                                @stepStatus
                                            </span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(step.Comments))
                                        {
                                            <div class="mt-2 p-2 bg-light rounded">
                                                <small class="text-muted">
                                                    <i class="fas fa-comment me-1"></i>
                                                    @step.Comments
                                                </small>
                                            </div>
                                        }
                                        <!-- Time Information -->
                                        <div class="timeline-dates mt-2">
                                            @if (step.ActionDate.HasValue)
                                            {
                                                <div class="d-flex align-items-center mb-1">
                                                    <i class="fas fa-check-circle me-2 text-success" style="font-size: 0.8rem;"></i>
                                                    <small class="text-muted">
                                                        <strong>Completed:</strong> @step.ActionDate?.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                    </small>
                                                </div>
                                                @if (step.AssignedDate != default && step.ActionDate.HasValue)
                                                {
                                                    var processingTime = step.ActionDate.Value - step.AssignedDate;
                                                    <div class="d-flex align-items-center mb-1">
                                                        <i class="fas fa-stopwatch me-2 text-primary" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Processing Time:</strong> @FormatTimeSpan(processingTime)
                                                        </small>
                                                    </div>
                                                }
                                            }
                                            else if (stepStatus == "InProgress")
                                            {
                                                <div class="d-flex align-items-center mb-1">
                                                    <i class="fas fa-spinner fa-spin me-2 text-primary" style="font-size: 0.8rem;"></i>
                                                    <small class="text-muted">
                                                        <strong>Status:</strong> In progress - actively reviewing
                                                    </small>
                                                </div>
                                            }
                                            else if (stepStatus == "Pending")
                                            {
                                                <div class="d-flex align-items-center mb-1">
                                                    <i class="fas fa-clock me-2 text-secondary" style="font-size: 0.8rem;"></i>
                                                    <small class="text-muted">
                                                        <strong>Status:</strong> Waiting in queue
                                                    </small>
                                                </div>
                                                @if (step.DueDate.HasValue)
                                                {
                                                    var timeUntilDue = step.DueDate - DateTime.UtcNow;
                                                    var isOverdue = timeUntilDue < TimeSpan.Zero;
                                                    <div class="d-flex align-items-center mb-1">
                                                        <i class="fas fa-calendar-alt me-2 @(isOverdue ? "text-danger" : "text-info")" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Due:</strong> @step.DueDate?.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                            @if (isOverdue)
                                                            {
                                                                <span class="badge bg-danger bg-opacity-10 text-danger ms-1" style="font-size: 0.7rem;">Overdue</span>
                                                            }
                                                        </small>
                                                    </div>
                                                }
                                                @if (step.AssignedDate != default)
                                                {
                                                    var waitingTime = DateTime.UtcNow - step.AssignedDate;
                                                    <div class="d-flex align-items-center mb-1">
                                                        <i class="fas fa-hourglass-half me-2 text-secondary" style="font-size: 0.8rem;"></i>
                                                        <small class="text-muted">
                                                            <strong>Waiting for:</strong> @FormatTimeSpan(waitingTime)
                                                        </small>
                                                    </div>
                                                }
                                            }
                                            
                                            @if (step.AssignedDate != default)
                                            {
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-paper-plane me-2 text-info" style="font-size: 0.8rem;"></i>
                                                    <small class="text-muted">
                                                        <strong>Assigned:</strong> @step.AssignedDate.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else if (!string.IsNullOrEmpty(Model.ApprovalEmail))
                        {
                            <!-- Single Approver System -->
                            var singleApprovalStatus = Model.Status;
                            var singleMarkerClass = singleApprovalStatus switch {
                                "Approved" => "bg-success",
                                "Rejected" => "bg-danger",
                                "Revision Required" => "bg-warning",
                                "Submitted" => "bg-secondary",
                                _ => "bg-light"
                            };
                            var singleStatusIcon = singleApprovalStatus switch {
                                "Approved" => "fa-check",
                                "Rejected" => "fa-times",
                                "Revision Required" => "fa-edit",
                                "Submitted" => "fa-clock",
                                _ => "fa-question"
                            };

                            <div class="timeline-item @(singleApprovalStatus == "Submitted" ? "timeline-pending" : "")">
                                <div class="timeline-marker @singleMarkerClass">
                                    <i class="fas @singleStatusIcon text-white" style="font-size: 0.7rem;"></i>
                                </div>
                                <div class="timeline-content">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="timeline-title">Approval Required</h6>
                                            <p class="timeline-text text-muted mb-1">
                                                Assigned to: @Model.ApprovalEmail
                                            </p>
                                        </div>
                                        <span class="badge timeline-status-badge timeline-status-@singleApprovalStatus.ToLower().Replace(" ", "-")">
                                            @(singleApprovalStatus == "Submitted" ? "Pending" : singleApprovalStatus)
                                        </span>
                                    </div>
                                    @if (singleApprovalStatus == "Submitted")
                                    {
                                        <div class="timeline-dates mt-2">
                                            <div class="d-flex align-items-center mb-1">
                                                <i class="fas fa-clock me-2 text-warning" style="font-size: 0.8rem;"></i>
                                                <small class="text-muted">
                                                    <strong>Status:</strong> Awaiting approval
                                                </small>
                                            </div>
                                            @if (Model.SubmittedDate.HasValue)
                                            {
                                                var waitingTime = DateTime.UtcNow - Model.SubmittedDate.Value;
                                                <div class="d-flex align-items-center">
                                                    <i class="fas fa-hourglass-half me-2 text-secondary" style="font-size: 0.8rem;"></i>
                                                    <small class="text-muted">
                                                        <strong>Waiting for:</strong> @FormatTimeSpan(waitingTime)
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Submit Options Section -->
            @if (Model.Status == "Draft")
            {
                @if (TempData["SuccessMessage"]?.ToString()?.Contains("REJECTED REQUEST UPDATED") == true)
                {
                    <div class="alert alert-info alert-dismissible fade show" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Ready for Resubmission!</strong> Your rejected request has been updated and is now ready to be submitted for approval again.
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                
                <div class="info-section">
                    <h3 class="section-title">
                        <i class="fas fa-paper-plane me-2"></i>
                        @(TempData["SuccessMessage"]?.ToString()?.Contains("REJECTED REQUEST UPDATED") == true || ViewBag.IsResubmitReady == true ? "Resubmit Request for Approval" : "Submit Request for Approval")
                    </h3>
                    
                    <!-- Approval Setup (Always Visible) -->
                    <div id="multiApprovalSetup">
                        <form asp-action="SubmitMultiApprovalPost" method="post" id="multiApprovalForm">
                            @Html.AntiForgeryToken()
                            <input name="Id" type="hidden" value="@Model.Id" />
                            
                            <!-- Workflow Configuration Card -->
                            <div class="card border-0 shadow-sm mb-4" hidden>
                                <div class="card-header bg-primary text-white py-3">
                                    <h5 class="card-title mb-0 text-white">
                                        <i class="fas fa-cogs me-2"></i>
                                        Workflow Configuration
                                    </h5>
                                </div>
                                <div class="card-body p-4">
                                    <div class="row">
                                        <div class="col-md-6 mb-4">
                                            <label for="WorkflowType" class="form-label">
                                                <i class="fas fa-route me-1"></i>
                                                Workflow Type <span class="text-danger">*</span>
                                            </label>
                                            <select name="WorkflowType" id="WorkflowType" class="form-select">
                                                <option value="Sequential">Sequential - Approvers must approve in order</option>
                                                <option value="Parallel">Parallel - All approvers can approve simultaneously</option>
                                            </select>
                                            <div class="form-text">
                                                <strong>Sequential:</strong> Each approver must wait for the previous one to complete.<br>
                                                <strong>Parallel:</strong> All approvers receive notification at the same time.
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Approvers Configuration Card -->
                            <div class="card border-0 shadow-sm mb-4">
                                <div class="card-header bg-success text-white py-3">
                                    <h5 class="card-title mb-0 text-white">
                                        <i class="fas fa-user-check me-2"></i>
                                        System-Defined Approvers
                                    </h5>
                                </div>
                                <div class="card-body p-4">
                                    <div id="approversContainer">
                                        <!-- Approvers List (Read-only) -->
                                        <div class="approvers-list">
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <h6 class="mb-0">
                                                    <i class="fas fa-users me-2"></i>
                                                    Designated Approvers
                                                </h6>
                                                <span class="badge bg-info">Auto-Selected from System</span>
                                            </div>
                                            
                                            @if (ViewBag.AvailableApprovers != null)
                                            {
                                                <div class="approvers-vertical-list">
                                                    @{
                                                        var approverIndex = 0;
                                                    }
                                                    @foreach (var approver in (List<TradingLimitMVC.Models.ApproverInfo>)ViewBag.AvailableApprovers)
                                                    {
                                                        <div class="mb-3">
                                                            <div class="card border-0 bg-light">
                                                                <div class="card-body p-3">
                                                                    <div class="d-flex align-items-start">
                                                                        <div class="form-check me-3" hidden>
                                                                            <input class="form-check-input" type="checkbox" 
                                                                                   value="@approver.Email" 
                                                                                   name="SelectedApprovers"
                                                                                   checked disabled>
                                                                        </div>
                                                                        <div class="flex-grow-1">
                                                                            <div class="d-flex align-items-center mb-2">
                                                                                @* <span class="badge bg-primary me-2">Step @(approverIndex + 1)</span> *@
                                                                                @if (approver.GroupId.HasValue)
                                                                                {
                                                                                    var groupBadgeClass = approver.GroupId switch {
                                                                                        1 => "bg-info",        // IWM
                                                                                        2 => "bg-warning",     // GSPS  
                                                                                        3 => "bg-danger",      // Risk
                                                                                        _ => "bg-secondary"
                                                                                    };
                                                                                    <span class="badge @groupBadgeClass me-2">@approver.GroupName</span>
                                                                                }
                                                                                <h6 class="card-title mb-0 text-primary">
                                                                                    @approver.Name
                                                                                </h6>
                                                                            </div>
                                                                            <p class="card-text mb-2 mt-1">
                                                                                <small class="text-muted">
                                                                                    <i class="fas fa-briefcase me-1"></i>@approver.Role
                                                                                </small><br>
                                                                                @* <small class="text-muted">
                                                                                    <i class="fas fa-building me-1"></i>@approver.Department
                                                                                </small><br>
                                                                                @if (approver.GroupId.HasValue)
                                                                                {
                                                                                    <small class="text-muted">
                                                                                        <i class="fas fa-users me-1"></i>Group: @approver.GroupName (ID: @approver.GroupId)
                                                                                    </small><br>
                                                                                } *@
                                                                                <small class="text-muted">
                                                                                    <i class="fas fa-envelope me-1"></i>@approver.Email
                                                                                </small>
                                                                                @if (!string.IsNullOrEmpty(approver.PhoneNumber))
                                                                                {
                                                                                    <br><small class="text-muted">
                                                                                        <i class="fas fa-phone me-1"></i>@approver.PhoneNumber
                                                                                    </small>
                                                                                }
                                                                            </p>
                                                                        </div>
                                                                    </div>
                                                                    <!-- Hidden inputs for form submission -->
                                                                    <input type="hidden" name="ApprovalSteps[@approverIndex].Email" value="@approver.Email" />
                                                                    <input type="hidden" name="ApprovalSteps[@approverIndex].Name" value="@approver.Name" />
                                                                    <input type="hidden" name="ApprovalSteps[@approverIndex].Role" value="@approver.Role" />
                                                                    <input type="hidden" name="ApprovalSteps[@approverIndex].ApprovalGroupId" value="@approver.GroupId" />
                                                                    <input type="hidden" name="ApprovalSteps[@approverIndex].ApprovalGroupName" value="@approver.GroupName" />
                                                                    <input type="hidden" name="ApprovalSteps[@approverIndex].StepNumber" value="@(approverIndex + 1)" />
                                                                    <input type="hidden" name="ApprovalSteps[@approverIndex].IsRequired" value="true" />
                                                                </div>
                                                            </div>
                                                        </div>
                                                        approverIndex++;
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="alert alert-warning">
                                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                                    No approvers found in the system. Please contact your administrator.
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    @* <div class="alert alert-info border-0 bg-info bg-opacity-10">
                                        <div class="d-flex align-items-start">
                                            <i class="fas fa-info-circle text-info me-2 mt-1"></i>
                                            <div>
                                                <strong>Smart Group-Based Approval Process:</strong>
                                                <ul class="mb-0 mt-2">
                                                    <li><strong>Auto-Assignment:</strong> All designated approvers from the system will be included with their group information</li>
                                                    <li><strong>Group Intelligence:</strong> System automatically groups approvers (IWM, GSPS, Risk) and prevents duplicate approvals from the same group</li>
                                                    <li><strong>Sequential:</strong> Approvers will receive notifications in the order displayed, but same group members are automatically skipped if group already approved</li>
                                                    <li><strong>Parallel:</strong> All approvers receive notifications simultaneously, with smart group checking to prevent redundant approvals</li>
                                                    <li><strong>Efficient Processing:</strong> Once someone from a group approves, other members from the same group are automatically skipped to the next step</li>
                                                </ul>
                                                <div class="mt-3">
                                                    <strong>Group Color Codes:</strong>
                                                    <span class="badge bg-info ms-2">IWM</span>
                                                    <span class="badge bg-warning ms-2">GSPS</span>
                                                    <span class="badge bg-danger ms-2">Risk</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div> *@
                                </div>
                            </div>

                            <!-- Submit Actions for Multi-Approval -->
                            <div class="d-flex gap-3 mb-4">
                                <button type="submit" class="btn btn-success btn-lg px-4">
                                    <i class="fas fa-paper-plane me-2"></i>
                                    @(TempData["SuccessMessage"]?.ToString()?.Contains("REJECTED REQUEST UPDATED") == true ? "Resubmit to All Designated Approvers" : "Submit to All Designated Approvers")
                                </button>
                                @if (TempData["SuccessMessage"]?.ToString()?.Contains("REJECTED REQUEST UPDATED") == true)
                                {
                                    <div class="alert alert-success d-inline-flex align-items-center ms-3" style="margin-bottom: 0; padding: 8px 12px;">
                                        <i class="fas fa-recycle me-2"></i>
                                        <small>Resubmission Ready</small>
                                    </div>
                                }
                            </div>
                        </form>
                    </div>
                </div>
            }

            <!-- Other Action Buttons -->
            <div class="btn-group">
                @if (Model.Status == "Draft" || Model.Status == "Rejected")
                {
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                        <i class="fas fa-edit"></i> Edit
                        @if (Model.Status == "Rejected")
                        {
                            <span class="badge bg-light text-dark ms-1">Resubmit</span>
                        }
                    </a>
                    @if (Model.Status == "Draft")
                    {
                        @* @if (TempData["SuccessMessage"]?.ToString()?.Contains("REJECTED REQUEST UPDATED") == true)
                        {
                            <button type="button" class="btn btn-success" onclick="scrollToSubmissionSection()">
                                <i class="fas fa-rocket"></i> Quick Resubmit
                            </button>
                        } *@
                        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">
                            <i class="fas fa-trash"></i> Delete
                        </a>
                    }
                }
                
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="fas fa-list"></i> Back to List
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    
    <script>
        $(document).ready(function() {
            // Form validation
            $('#multiApprovalForm').on('submit', function(e) {
                // Clear any previous alerts
                $('.validation-alert').remove();
                
                // Check if we have any approvers (hidden inputs with Email)
                const approverEmails = $('input[name*="Email"][type="hidden"]').map(function() {
                    return $(this).val().trim();
                }).get();
                
                const validEmails = approverEmails.filter(email => email.length > 0);
                
                if (validEmails.length === 0) {
                    e.preventDefault();
                    showValidationAlert('No approvers are available in the system. Please contact your administrator.', 'danger');
                    return false;
                }
                
                // Collect group information for confirmation
                const groupInfo = [];
                $('input[name*="ApprovalGroupName"][type="hidden"]').each(function(index) {
                    const groupName = $(this).val();
                    const groupId = $(`input[name*="ApprovalGroupId"][type="hidden"]`).eq(index).val();
                    const approverName = $(`input[name*="Name"][type="hidden"]`).eq(index).val();
                    const approverEmail = $(`input[name*="Email"][type="hidden"]`).eq(index).val();
                    
                    if (groupName && groupId && approverEmail) {
                        groupInfo.push({
                            groupName: groupName,
                            groupId: groupId,
                            approverName: approverName,
                            approverEmail: approverEmail
                        });
                    }
                });
                
                // Group approvers by group for better display
                const groupedApprovers = groupInfo.reduce((acc, curr) => {
                    if (!acc[curr.groupName]) {
                        acc[curr.groupName] = [];
                    }
                    acc[curr.groupName].push(curr);
                    return acc;
                }, {});
                
                // Create confirmation message with group information
                let confirmMessage = `Are you sure you want to submit this request with smart group-based approval?\n\n`;
                confirmMessage += `Total Approvers: ${validEmails.length}\n`;
                confirmMessage += `Groups Involved: ${Object.keys(groupedApprovers).length}\n\n`;
                
                Object.keys(groupedApprovers).forEach(groupName => {
                    const approvers = groupedApprovers[groupName];
                    confirmMessage += `${groupName} Group (${approvers.length} approver${approvers.length > 1 ? 's' : ''}):\n`;
                    approvers.forEach(approver => {
                        confirmMessage += `  • ${approver.approverName} (${approver.approverEmail})\n`;
                    });
                    confirmMessage += `\n`;
                });
                
                confirmMessage += `Note: Smart group logic will prevent duplicate approvals from the same group.`;
                
                return confirm(confirmMessage);
            });
            
            // Function to show validation alerts
            function showValidationAlert(message, type) {
                const alertHtml = `
                    <div class="alert alert-${type} alert-dismissible fade show validation-alert" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                $('#multiApprovalForm').prepend(alertHtml);
                
                // Scroll to the alert
                $('html, body').animate({
                    scrollTop: $('#multiApprovalForm').offset().top - 20
                }, 500);
            }

            // File attachment functions
            window.uploadAdditionalFiles = function(requestId) {
                const fileInput = document.getElementById('additionalAttachments');
                const files = fileInput.files;
                
                if (files.length === 0) return;
                
                const formData = new FormData();
                for (let i = 0; i < files.length; i++) {
                    formData.append('attachments', files[i]);
                }
                
                // Add anti-forgery token
                formData.append('__RequestVerificationToken', $('input[name="__RequestVerificationToken"]').val());
                
                // Show upload progress
                $('#uploadProgress').show();
                $('.upload-status').html('<i class="fas fa-spinner fa-spin"></i> Uploading files...');
                
                $.ajax({
                    url: `/TradingLimitRequest/AddAttachment/${requestId}`,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        $('#uploadProgress').hide();
                        
                        if (response.success) {
                            // Show success message
                            showToast(response.message, 'success');
                            
                            // Reload the page to show new attachments
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            showToast(response.message || 'Upload failed', 'error');
                        }
                        
                        // Clear file input
                        fileInput.value = '';
                    },
                    error: function(xhr, status, error) {
                        $('#uploadProgress').hide();
                        showToast('An error occurred while uploading files', 'error');
                        fileInput.value = '';
                    }
                });
            };

            window.deleteAttachment = function(attachmentId, fileName) {
                if (!confirm(`Are you sure you want to delete "${fileName}"?`)) {
                    return;
                }
                
                $.ajax({
                    url: `/TradingLimitRequest/DeleteAttachment/${attachmentId}`,
                    type: 'POST',
                    data: {
                        requestId: @Model.Id,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Remove the attachment item from the list
                            $(`.attachment-item[data-attachment-id="${attachmentId}"]`).fadeOut(300, function() {
                                $(this).remove();
                                
                                // Check if there are no more attachments
                                if ($('#attachmentsList .attachment-item').length === 0) {
                                    $('#attachmentsList').hide();
                                    $('#noAttachmentsMessage').show();
                                }
                            });
                            
                            showToast(response.message, 'success');
                        } else {
                            showToast(response.message || 'Failed to delete attachment', 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast('An error occurred while deleting the attachment', 'error');
                    }
                });
            };

            // Toast notification function
            function showToast(message, type) {
                const toastType = type === 'success' ? 'success' : 'danger';
                const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
                
                const toast = $(`
                    <div class="toast align-items-center text-white bg-${toastType} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                <i class="fas ${icon} me-2"></i>${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `);
                
                // Create toast container if it doesn't exist
                if ($('#toastContainer').length === 0) {
                    $('body').append('<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3"></div>');
                }
                
                $('#toastContainer').append(toast);
                toast.toast('show');
                
                // Remove toast after it's hidden
                toast.on('hidden.bs.toast', function() {
                    $(this).remove();
                });
            }
            
            // Function to scroll to submission section
            window.scrollToSubmissionSection = function() {
                const submissionSection = document.querySelector('h3:contains("Submit Request for Approval"), h3:contains("Resubmit Request for Approval")');
                if (submissionSection) {
                    submissionSection.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'start' 
                    });
                } else {
                    // Fallback: scroll to submission form
                    const multiApprovalSetup = document.getElementById('multiApprovalSetup');
                    if (multiApprovalSetup) {
                        multiApprovalSetup.scrollIntoView({ 
                            behavior: 'smooth', 
                            block: 'start' 
                        });
                    }
                }
                
                // Highlight the submission section briefly
                setTimeout(function() {
                    const submitButton = document.querySelector('button[type="submit"]');
                    if (submitButton) {
                        submitButton.classList.add('btn-pulse');
                        setTimeout(function() {
                            submitButton.classList.remove('btn-pulse');
                        }, 2000);
                    }
                }, 500);
            };

        });
    </script>
    
    <style>
        .btn-pulse {
            animation: pulse-highlight 2s ease-in-out;
        }
        
        @@keyframes pulse-highlight {
            0%, 100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7); }
            50% { transform: scale(1.05); box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }
        }
    </style>
}